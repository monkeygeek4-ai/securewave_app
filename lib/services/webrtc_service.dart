// lib/services/webrtc_service.dart

import 'dart:async';
import 'package:flutter_webrtc/flutter_webrtc.dart';
import '../models/call.dart';
import 'websocket_manager.dart';

class WebRTCService {
  static WebRTCService? _instance;
  static WebRTCService get instance {
    _instance ??= WebRTCService._internal();
    return _instance!;
  }

  WebRTCService._internal() {
    _initializeStreams();
  }

  RTCPeerConnection? _peerConnection;
  MediaStream? _localStream;
  MediaStream? _remoteStream;
  String? _currentUserId;
  Call? _currentCall;

  StreamController<Call?>? _callStateController;
  StreamController<MediaStream?>? _localStreamController;
  StreamController<MediaStream?>? _remoteStreamController;

  Stream<Call?> get callState => _callStateController?.stream ?? Stream.empty();
  Stream<MediaStream?> get localStream =>
      _localStreamController?.stream ?? Stream.empty();
  Stream<MediaStream?> get remoteStream =>
      _remoteStreamController?.stream ?? Stream.empty();

  StreamSubscription? _wsSubscription;

  final List<RTCIceCandidate> _iceCandidatesQueue = [];
  bool _isRemoteDescriptionSet = false;

  final Map<String, dynamic> _iceServers = {
    'iceServers': [
      {'urls': 'stun:stun.l.google.com:19302'},
      {'urls': 'stun:stun1.l.google.com:19302'},
      {'urls': 'stun:securewave.sbk-19.ru:3478'},
      {
        'urls': 'turn:securewave.sbk-19.ru:3478?transport=udp',
        'username': 'user',
        'credential': 'VerySecureRandomKey123ChangeThis'
      },
      {
        'urls': 'turn:securewave.sbk-19.ru:3478?transport=tcp',
        'username': 'user',
        'credential': 'VerySecureRandomKey123ChangeThis'
      },
      {
        'urls': 'turns:securewave.sbk-19.ru:5349?transport=tcp',
        'username': 'user',
        'credential': 'VerySecureRandomKey123ChangeThis'
      }
    ]
  };

  final Map<String, dynamic> _constraints = {
    'mandatory': {
      'OfferToReceiveAudio': true,
      'OfferToReceiveVideo': true,
    },
    'optional': [],
  };

  void _initializeStreams() {
    _callStateController?.close();
    _localStreamController?.close();
    _remoteStreamController?.close();

    _callStateController = StreamController<Call?>.broadcast();
    _localStreamController = StreamController<MediaStream?>.broadcast();
    _remoteStreamController = StreamController<MediaStream?>.broadcast();
  }

  void _safeAddToCallState(Call? call) {
    if (_callStateController != null && !_callStateController!.isClosed) {
      _callStateController!.add(call);
      print('[WebRTC] üì¢ CallState –æ–±–Ω–æ–≤–ª–µ–Ω: ${call?.status}');
    } else {
      print('[WebRTC] ‚ö†Ô∏è CallStateController –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ null!');
    }
  }

  void _safeAddToLocalStream(MediaStream? stream) {
    if (_localStreamController != null && !_localStreamController!.isClosed) {
      _localStreamController!.add(stream);
    }
  }

  void _safeAddToRemoteStream(MediaStream? stream) {
    if (_remoteStreamController != null && !_remoteStreamController!.isClosed) {
      _remoteStreamController!.add(stream);
    }
  }

  bool get isReady {
    final ready = _callStateController != null &&
        !_callStateController!.isClosed &&
        _currentCall == null &&
        _peerConnection == null;

    print('[WebRTC] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: $ready');
    if (!ready) {
      print(
          '[WebRTC]   - Controller: ${_callStateController != null ? "OK" : "NULL"}');
      print('[WebRTC]   - Closed: ${_callStateController?.isClosed ?? true}');
      print(
          '[WebRTC]   - Current call: ${_currentCall == null ? "NONE" : "EXISTS"}');
      print(
          '[WebRTC]   - Peer connection: ${_peerConnection == null ? "NONE" : "EXISTS"}');
    }

    return ready;
  }

  Future<void> initialize(String userId) async {
    try {
      _currentUserId = userId;
      print('[WebRTC] ========================================');
      print('[WebRTC] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏ —á—Ç–æ-—Ç–æ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
      if (_peerConnection != null || _localStream != null) {
        print('[WebRTC] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞, –æ—á–∏—â–∞–µ–º');
        _cleanup();
      }

      // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º stream controllers
      print('[WebRTC] üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è stream controllers');
      _initializeStreams();

      _wsSubscription?.cancel();

      print('[WebRTC] üîå –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è...');
      _wsSubscription = WebSocketManager.instance.messages.listen(
        _handleWebSocketMessage,
        onError: (error) {
          print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ WebSocket –ø–æ–¥–ø–∏—Å–∫–∏: $error');
        },
        cancelOnError: false, // –ù–µ –æ—Ç–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
      );

      print('[WebRTC] ‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      print('[WebRTC] ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket –∞–∫—Ç–∏–≤–Ω–∞');
      print('[WebRTC] üåê TURN —Å–µ—Ä–≤–µ—Ä: securewave.sbk-19.ru:3478');
      print('[WebRTC] ========================================');
    } catch (e) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
      rethrow;
    }
  }

  void _handleWebSocketMessage(Map<String, dynamic> message) {
    print('[WebRTC] ========================================');
    print('[WebRTC] üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message['type']}');
    print('[WebRTC] –î–∞–Ω–Ω—ã–µ: $message');
    print('[WebRTC] ========================================');

    switch (message['type']) {
      case 'call_offer':
        print('[WebRTC] üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞');
        _handleIncomingCall(message);
        break;
      case 'call_answer':
        print('[WebRTC] üìû –ü–æ–ª—É—á–µ–Ω call_answer –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
        _handleCallAnswer(message);
        break;
      case 'call_ice_candidate':
        print('[WebRTC] üßä –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç');
        _handleIceCandidate(message);
        break;
      case 'call_ended':
      case 'call_end':
        print('[WebRTC] üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
        _handleCallEnded(message);
        break;
      case 'call_declined':
      case 'call_decline':
        print('[WebRTC] üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
        _handleCallDeclined(message);
        break;
      default:
        print('[WebRTC] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message['type']}');
    }
  }

  Future<void> startCall({
    required String callId,
    required String chatId,
    required String receiverId,
    required String receiverName,
    required String callType,
  }) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      if (!isReady) {
        print(
            '[WebRTC] ‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∑–≤–æ–Ω–∫—É, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º');
        await initialize(_currentUserId!);
        await Future.delayed(Duration(milliseconds: 500));
      }

      print('[WebRTC] ========================================');
      print('[WebRTC] üìû –ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫: $callType —Å $receiverName');
      print('[WebRTC] callId: $callId');
      print('[WebRTC] chatId: $chatId');
      print('[WebRTC] receiverId: $receiverId');
      print('[WebRTC] ========================================');

      _currentCall = Call(
        id: callId,
        chatId: chatId,
        callerId: _currentUserId!,
        callerName: '–í—ã',
        receiverId: receiverId,
        receiverName: receiverName,
        callType: callType,
        status: CallStatus.calling,
        startTime: DateTime.now(),
      );

      _safeAddToCallState(_currentCall);

      await _initializeMediaStreams(callType == 'video');
      await _createPeerConnection();

      final offer = await _peerConnection!.createOffer(_constraints);
      await _peerConnection!.setLocalDescription(offer);

      print('[WebRTC] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer —á–µ—Ä–µ–∑ WebSocket');
      WebSocketManager.instance.sendCallOffer(
        callId,
        chatId,
        callType,
        offer.toMap(),
        receiverId,
      );

      print('[WebRTC] ‚úÖ Offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º answer...');

      Timer(Duration(seconds: 15), () {
        if (_currentCall != null &&
            (_currentCall!.status == CallStatus.calling ||
                _currentCall!.status == CallStatus.connecting)) {
          print('[WebRTC] ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –∑–∞ 15 —Å–µ–∫');
          print('[WebRTC] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${_currentCall!.status}');
          print('[WebRTC] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: –ø–æ–ª—É—á–µ–Ω –ª–∏ call_answer –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
        }
      });
    } catch (e) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞: $e');
      await endCall('error');
      rethrow;
    }
  }

  Future<void> _initializeMediaStreams(bool video) async {
    try {
      print('[WebRTC] üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞ —Å—Ç—Ä–∏–º–æ–≤ (–≤–∏–¥–µ–æ: $video)');

      final Map<String, dynamic> mediaConstraints = {
        'audio': true,
        'video': video
            ? {
                'mandatory': {
                  'minWidth': '640',
                  'minHeight': '480',
                  'minFrameRate': '30',
                },
                'facingMode': 'user',
              }
            : false,
      };

      _localStream =
          await navigator.mediaDevices.getUserMedia(mediaConstraints);
      _safeAddToLocalStream(_localStream);

      print('[WebRTC] ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º —Å–æ–∑–¥–∞–Ω');
    } catch (e) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞: $e');
      throw e;
    }
  }

  Future<void> _createPeerConnection() async {
    try {
      print('[WebRTC] üîó –°–æ–∑–¥–∞–Ω–∏–µ peer connection');
      print('[WebRTC] üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º TURN —Å–µ—Ä–≤–µ—Ä: securewave.sbk-19.ru');
      print(
          '[WebRTC] üìä ICE —Å–µ—Ä–≤–µ—Ä—ã: ${_iceServers['iceServers'].length} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π');

      _peerConnection = await createPeerConnection(_iceServers);

      if (_localStream != null) {
        _localStream!.getTracks().forEach((track) {
          _peerConnection!.addTrack(track, _localStream!);
        });
      }

      _peerConnection!.onIceCandidate = (RTCIceCandidate candidate) {
        final candidateStr = candidate.candidate ?? '';
        print('[WebRTC] üßä –ù–æ–≤—ã–π ICE –∫–∞–Ω–¥–∏–¥–∞—Ç: $candidateStr');

        if (candidateStr.contains('typ relay')) {
          print(
              '[WebRTC] ‚úÖ RELAY –∫–∞–Ω–¥–∏–¥–∞—Ç —á–µ—Ä–µ–∑ TURN! IP: ${candidateStr.split(' ')[4]}');
        } else if (candidateStr.contains('typ srflx')) {
          print(
              '[WebRTC] ‚úÖ SRFLX –∫–∞–Ω–¥–∏–¥–∞—Ç —á–µ—Ä–µ–∑ STUN! IP: ${candidateStr.split(' ')[4]}');
        } else if (candidateStr.contains('typ host')) {
          print('[WebRTC] üìç HOST –∫–∞–Ω–¥–∏–¥–∞—Ç (–ª–æ–∫–∞–ª—å–Ω—ã–π)');
        }

        if (_currentCall != null) {
          WebSocketManager.instance.sendIceCandidate(
            _currentCall!.id,
            candidate.toMap(),
          );
        }
      };

      _peerConnection!.onTrack = (RTCTrackEvent event) {
        print('[WebRTC] üé¨ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫!');
        if (event.streams.isNotEmpty) {
          _remoteStream = event.streams.first;
          _safeAddToRemoteStream(_remoteStream);
          print('[WebRTC] ‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å—Ç—Ä–∏–º –¥–æ–±–∞–≤–ª–µ–Ω');
        }
      };

      _peerConnection!.onConnectionState = (RTCPeerConnectionState state) {
        print('[WebRTC] üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $state');

        if (state == RTCPeerConnectionState.RTCPeerConnectionStateConnected) {
          print('[WebRTC] ‚úÖ –£–°–ü–ï–•! –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
          if (_currentCall != null) {
            _currentCall = _currentCall!.copyWith(status: CallStatus.active);
            _safeAddToCallState(_currentCall);
          }
        } else if (state ==
            RTCPeerConnectionState.RTCPeerConnectionStateFailed) {
          print('[WebRTC] ‚ùå –û–®–ò–ë–ö–ê! –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
          endCall('connection_failed');
        } else if (state ==
            RTCPeerConnectionState.RTCPeerConnectionStateDisconnected) {
          print('[WebRTC] üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
          endCall('connection_lost');
        }
      };

      _peerConnection!.onIceConnectionState = (RTCIceConnectionState state) {
        print('[WebRTC] üßä ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $state');

        if (state == RTCIceConnectionState.RTCIceConnectionStateConnected ||
            state == RTCIceConnectionState.RTCIceConnectionStateCompleted) {
          print('[WebRTC] ‚úÖ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
        } else if (state == RTCIceConnectionState.RTCIceConnectionStateFailed) {
          print('[WebRTC] ‚ùå ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å!');
        } else if (state ==
            RTCIceConnectionState.RTCIceConnectionStateDisconnected) {
          print('[WebRTC] üîå ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
        }
      };

      _peerConnection!.onIceGatheringState = (RTCIceGatheringState state) {
        print('[WebRTC] üßä ICE gathering: $state');

        if (state == RTCIceGatheringState.RTCIceGatheringStateComplete) {
          print('[WebRTC] ‚úÖ –í—Å–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å–æ–±—Ä–∞–Ω—ã');
        }
      };

      print('[WebRTC] ‚úÖ Peer connection —Å–æ–∑–¥–∞–Ω');
    } catch (e) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è peer connection: $e');
      throw e;
    }
  }

  Future<void> _handleIncomingCall(Map<String, dynamic> message) async {
    try {
      print('[WebRTC] ========================================');
      print('[WebRTC] üìû –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö!');
      print('[WebRTC] –û—Ç: ${message['callerName']}');
      print('[WebRTC] CallId: ${message['callId']}');
      print('[WebRTC] ChatId: ${message['chatId']}');
      print('[WebRTC] –¢–∏–ø: ${message['callType']}');
      print('[WebRTC] ========================================');

      _currentCall = Call(
        id: message['callId'],
        chatId: message['chatId'],
        callerId: message['callerId'],
        callerName: message['callerName'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
        receiverId: _currentUserId!,
        receiverName: '–í—ã',
        callType: message['callType'] ?? 'audio',
        status: CallStatus.incoming,
        startTime: DateTime.now(),
      );

      print('[WebRTC] üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤ callState stream');
      _safeAddToCallState(_currentCall);

      _currentCall = _currentCall!.copyWith(
        offer: message['offer'],
      );

      print(
          '[WebRTC] ‚úÖ –ó–≤–æ–Ω–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      print('[WebRTC] ========================================');
    } catch (e) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞: $e');
      print('[WebRTC] Stack trace: ${StackTrace.current}');
    }
  }

  Future<void> answerCall(String callId) async {
    try {
      if (_currentCall == null || _currentCall!.id != callId) {
        print('[WebRTC] ‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      print('[WebRTC] ========================================');
      print('[WebRTC] üìû –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫ $callId');
      print('[WebRTC] ========================================');

      _currentCall = _currentCall!.copyWith(status: CallStatus.connecting);
      _safeAddToCallState(_currentCall);

      await _initializeMediaStreams(_currentCall!.callType == 'video');
      await _createPeerConnection();

      final offer = RTCSessionDescription(
        _currentCall!.offer!['sdp'],
        _currentCall!.offer!['type'],
      );

      print('[WebRTC] üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º remote description (offer)');
      await _peerConnection!.setRemoteDescription(offer);
      _isRemoteDescriptionSet = true;

      await _processIceCandidatesQueue();

      print('[WebRTC] üìù –°–æ–∑–¥–∞—ë–º answer');
      final answer = await _peerConnection!.createAnswer(_constraints);
      await _peerConnection!.setLocalDescription(answer);

      print('[WebRTC] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º answer –∑–≤–æ–Ω—è—â–µ–º—É');
      WebSocketManager.instance.sendCallAnswer(callId, answer.toMap());

      print('[WebRTC] ‚úÖ Answer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      print('[WebRTC] ========================================');
    } catch (e) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫: $e');
      await endCall('error');
    }
  }

  Future<void> _handleCallAnswer(Map<String, dynamic> message) async {
    try {
      print('[WebRTC] ========================================');
      print('[WebRTC] üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º answer –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
      print('[WebRTC] ========================================');

      if (_peerConnection == null) {
        print('[WebRTC] ‚ùå –û–®–ò–ë–ö–ê: Peer connection –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return;
      }

      final answer = RTCSessionDescription(
        message['answer']['sdp'],
        message['answer']['type'],
      );

      print('[WebRTC] üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º remote description (answer)');
      await _peerConnection!.setRemoteDescription(answer);
      _isRemoteDescriptionSet = true;

      print('[WebRTC] üßä Answer –ø—Ä–∏–º–µ–Ω–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
      await _processIceCandidatesQueue();

      if (_currentCall != null) {
        _currentCall = _currentCall!.copyWith(status: CallStatus.connecting);
        _safeAddToCallState(_currentCall);
      }

      print('[WebRTC] ‚úÖ Answer –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ–∂–∏–¥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      print('[WebRTC] ========================================');
    } catch (e) {
      print('[WebRTC] ‚ùå –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer: $e');
    }
  }

  Future<void> _handleIceCandidate(Map<String, dynamic> message) async {
    try {
      final candidateData = message['candidate'];
      print('[WebRTC] üßä –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ peer');

      final candidate = RTCIceCandidate(
        candidateData['candidate'],
        candidateData['sdpMid'],
        candidateData['sdpMLineIndex'],
      );

      if (_peerConnection != null && _isRemoteDescriptionSet) {
        await _peerConnection!.addCandidate(candidate);
        print('[WebRTC] ‚úÖ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
      } else {
        _iceCandidatesQueue.add(candidate);
        print(
            '[WebRTC] üìã ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (remote description –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)');
      }
    } catch (e) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: $e');
    }
  }

  Future<void> _processIceCandidatesQueue() async {
    if (_iceCandidatesQueue.isEmpty) {
      print('[WebRTC] ‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø—É—Å—Ç–∞');
      return;
    }

    print(
        '[WebRTC] üßä –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (${_iceCandidatesQueue.length} —à—Ç.)');

    for (final candidate in _iceCandidatesQueue) {
      try {
        await _peerConnection!.addCandidate(candidate);
      } catch (e) {
        print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: $e');
      }
    }

    _iceCandidatesQueue.clear();
    print('[WebRTC] ‚úÖ –û—á–µ—Ä–µ–¥—å ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
  }

  void _handleCallEnded(Map<String, dynamic> message) {
    print('[WebRTC] ========================================');
    print('[WebRTC] üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${message['reason']}');
    print('[WebRTC] ========================================');

    _cleanup();

    if (_currentCall != null) {
      _currentCall = _currentCall!.copyWith(
        status: CallStatus.ended,
        endTime: DateTime.now(),
      );
      _safeAddToCallState(_currentCall);

      Future.delayed(Duration(seconds: 2), () {
        _currentCall = null;
        _safeAddToCallState(null);
      });
    }
  }

  void _handleCallDeclined(Map<String, dynamic> message) {
    print('[WebRTC] ========================================');
    print('[WebRTC] üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    print('[WebRTC] ========================================');

    _cleanup();

    if (_currentCall != null) {
      _currentCall = _currentCall!.copyWith(status: CallStatus.declined);
      _safeAddToCallState(_currentCall);

      Future.delayed(Duration(seconds: 2), () {
        _currentCall = null;
        _safeAddToCallState(null);
      });
    }
  }

  Future<void> declineCall(String callId) async {
    print('[WebRTC] üìû –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ $callId');

    if (_currentCall != null && _currentCall!.id == callId) {
      WebSocketManager.instance.declineCall(callId);
      _cleanup();

      _currentCall = null;
      _safeAddToCallState(null);
    }
  }

  Future<void> toggleMute() async {
    if (_localStream != null) {
      final audioTrack = _localStream!.getAudioTracks().firstOrNull;
      if (audioTrack != null) {
        audioTrack.enabled = !audioTrack.enabled;
        print(
            '[WebRTC] üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω: ${audioTrack.enabled ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}');
      }
    }
  }

  Future<void> toggleVideo() async {
    if (_localStream != null) {
      final videoTrack = _localStream!.getVideoTracks().firstOrNull;
      if (videoTrack != null) {
        videoTrack.enabled = !videoTrack.enabled;
        print(
            '[WebRTC] üìπ –í–∏–¥–µ–æ: ${videoTrack.enabled ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ"}');
      }
    }
  }

  Future<void> toggleSpeaker() async {
    print('[WebRTC] üîä –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∞ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏)');
  }

  Future<void> acceptCall(String callId) async {
    return answerCall(callId);
  }

  Future<void> endCall([String? reason]) async {
    print('[WebRTC] ========================================');
    print('[WebRTC] üìû –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫: ${reason ?? 'user'}');
    print('[WebRTC] ========================================');

    if (_currentCall != null) {
      final callId = _currentCall!.id;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      WebSocketManager.instance.endCall(callId, reason ?? 'user');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      _currentCall = _currentCall!.copyWith(
        status: CallStatus.ended,
        endTime: DateTime.now(),
      );
      _safeAddToCallState(_currentCall);

      // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
      _cleanup();

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      await Future.delayed(Duration(seconds: 2));
      _currentCall = null;
      _safeAddToCallState(null);

      print('[WebRTC] ‚úÖ –ó–≤–æ–Ω–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω, –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –≤—ã–∑–æ–≤—É');
    }
  }

  void _cleanup() {
    print('[WebRTC] üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');

    try {
      if (_localStream != null) {
        _localStream!.getTracks().forEach((track) {
          try {
            track.stop();
          } catch (e) {
            print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–∫–∞: $e');
          }
        });

        try {
          _localStream!.dispose();
        } catch (e) {
          print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ dispose –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ stream: $e');
        }
      }
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ stream: $e');
    }

    _localStream = null;
    _safeAddToLocalStream(null);

    _remoteStream = null;
    _safeAddToRemoteStream(null);

    try {
      if (_peerConnection != null) {
        _peerConnection!.close();
      }
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ peer connection: $e');
    }

    _peerConnection = null;
    _iceCandidatesQueue.clear();
    _isRemoteDescriptionSet = false; // –ö–†–ò–¢–ò–ß–ù–û: –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞!

    print('[WebRTC] ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  void dispose() {
    print('[WebRTC] üóëÔ∏è Dispose —Å–µ—Ä–≤–∏—Å–∞');

    _cleanup();

    try {
      _wsSubscription?.cancel();
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ WebSocket: $e');
    }

    try {
      _callStateController?.close();
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è callStateController: $e');
    }

    try {
      _localStreamController?.close();
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è localStreamController: $e');
    }

    try {
      _remoteStreamController?.close();
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è remoteStreamController: $e');
    }

    _callStateController = null;
    _localStreamController = null;
    _remoteStreamController = null;
    _currentCall = null;

    print('[WebRTC] ‚úÖ Dispose –∑–∞–≤–µ—Ä—à–µ–Ω');
  }
}
