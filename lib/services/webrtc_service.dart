// lib/services/webrtc_service.dart

import 'dart:async';
import 'package:flutter/services.dart';
import 'package:flutter_webrtc/flutter_webrtc.dart';
import '../models/call.dart';
import 'websocket_manager.dart';

class WebRTCService {
  static WebRTCService? _instance;
  static WebRTCService get instance {
    _instance ??= WebRTCService._internal();
    return _instance!;
  }

  WebRTCService._internal() {
    _initializeStreams();
  }

  // MethodChannel –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  static const platform = MethodChannel('com.securewave.app/call');

  RTCPeerConnection? _peerConnection;
  MediaStream? _localStream;
  MediaStream? _remoteStream;
  String? _currentUserId;
  Call? _currentCall;
  Call? get currentCall => _currentCall;
  // –•—Ä–∞–Ω–µ–Ω–∏–µ offer –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
  Map<String, dynamic>? _pendingOffer;

  // –§–ª–∞–≥ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
  bool _isAnswering = false;

  StreamController<Call?>? _callStateController;
  StreamController<MediaStream?>? _localStreamController;
  StreamController<MediaStream?>? _remoteStreamController;

  Stream<Call?> get callState => _callStateController?.stream ?? Stream.empty();
  Stream<MediaStream?> get localStream =>
      _localStreamController?.stream ?? Stream.empty();
  Stream<MediaStream?> get remoteStream =>
      _remoteStreamController?.stream ?? Stream.empty();

  StreamSubscription? _wsSubscription;

  final List<RTCIceCandidate> _iceCandidatesQueue = [];
  bool _isRemoteDescriptionSet = false;

  final Map<String, dynamic> _iceServers = {
    'iceServers': [
      {'urls': 'stun:stun.l.google.com:19302'},
      {'urls': 'stun:stun1.l.google.com:19302'},
      {'urls': 'stun:stun2.l.google.com:19302'},
      {'urls': 'stun:stun3.l.google.com:19302'},
      {'urls': 'stun:stun4.l.google.com:19302'},
      {
        'urls': 'turn:securewave.sbk-19.ru:3478',
        'username': 'securewave',
        'credential': 'SecureWave2024!Turn'
      },
    ]
  };

  final Map<String, dynamic> _constraints = {
    'mandatory': {
      'OfferToReceiveAudio': true,
      'OfferToReceiveVideo': true,
    },
    'optional': [],
  };

  void _initializeStreams() {
    print('[WebRTC] üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è stream controllers');
    _callStateController?.close();
    _localStreamController?.close();
    _remoteStreamController?.close();

    _callStateController = StreamController<Call?>.broadcast();
    _localStreamController = StreamController<MediaStream?>.broadcast();
    _remoteStreamController = StreamController<MediaStream?>.broadcast();
  }

  void _safeAddToCallState(Call? call) {
    if (_callStateController != null && !_callStateController!.isClosed) {
      _callStateController!.add(call);
      print('[WebRTC] üì¢ CallState –æ–±–Ω–æ–≤–ª–µ–Ω: ${call?.status}');
    } else {
      print('[WebRTC] ‚ö†Ô∏è CallStateController –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ null');
    }
  }

  void _safeAddToLocalStream(MediaStream? stream) {
    if (_localStreamController != null && !_localStreamController!.isClosed) {
      _localStreamController!.add(stream);
    }
  }

  void _safeAddToRemoteStream(MediaStream? stream) {
    if (_remoteStreamController != null && !_remoteStreamController!.isClosed) {
      _remoteStreamController!.add(stream);
    }
  }

  Future<void> initialize(String userId) async {
    try {
      _currentUserId = userId;
      print('[WebRTC] ========================================');
      print('[WebRTC] üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø WebRTC Service');
      print('[WebRTC] ========================================');
      print('[WebRTC] User ID: $userId');

      if (_callStateController == null || _callStateController!.isClosed) {
        _initializeStreams();
      }

      print('[WebRTC] üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è...');
      _wsSubscription?.cancel();
      _wsSubscription = WebSocketManager.instance.messages.listen(
        (data) {
          print('[WebRTC] üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ');
          _handleWebSocketMessage(data);
        },
        onError: (error) {
          print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ WebSocket: $error');
        },
        cancelOnError: false,
      );

      print('[WebRTC] ‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      print('[WebRTC] ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket –∞–∫—Ç–∏–≤–Ω–∞');
      print('[WebRTC] üåê TURN —Å–µ—Ä–≤–µ—Ä: securewave.sbk-19.ru:3478');
      print('[WebRTC] ========================================');
    } catch (e, stackTrace) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
      print('[WebRTC] Stack trace: $stackTrace');
      rethrow;
    }
  }

  void _handleWebSocketMessage(Map<String, dynamic> message) {
    final type = message['type'];

    print('[WebRTC] ========================================');
    print('[WebRTC] üì® WebSocket message: $type');
    print('[WebRTC] ========================================');

    switch (type) {
      case 'call_offer':
        print('[WebRTC] üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–•–û–î–Ø–©–ï–ì–û –ó–í–û–ù–ö–ê!');
        _handleIncomingCall(message);
        break;

      case 'call_answer':
        print('[WebRTC] ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫');
        _handleCallAnswer(message);
        break;

      case 'call_ice_candidate':
        print('[WebRTC] üßä –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE candidate');
        _handleIceCandidate(message);
        break;

      case 'call_ended':
        print('[WebRTC] üìµ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
        _handleCallEnded(message);
        break;

      case 'call_declined':
        print('[WebRTC] ‚ùå –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
        _handleCallDeclined(message);
        break;

      default:
        print('[WebRTC] ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ "$type" –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–≤–æ–Ω–∫–∞–º');
        print('[WebRTC] (–î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è ChatProvider)');
        break;
    }

    print('[WebRTC] ========================================');
  }

  Future<void> startCall({
    required String callId,
    required String chatId,
    required String receiverId,
    required String receiverName,
    required String callType,
  }) async {
    try {
      print('[WebRTC] ========================================');
      print('[WebRTC] üìû –ù–ê–ß–ò–ù–ê–ï–ú –ò–°–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö');
      print('[WebRTC] ========================================');
      print('[WebRTC] –¢–∏–ø: $callType');
      print('[WebRTC] –ö–æ–º—É: $receiverName (ID: $receiverId)');
      print('[WebRTC] callId: $callId');
      print('[WebRTC] chatId: $chatId');

      _currentCall = Call(
        id: callId,
        chatId: chatId,
        callerId: _currentUserId!,
        callerName: '–í—ã',
        receiverId: receiverId,
        receiverName: receiverName,
        callType: callType,
        status: CallStatus.calling,
        startTime: DateTime.now(),
      );

      print('[WebRTC] üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ UI (calling)');
      _safeAddToCallState(_currentCall);

      await _initializeMediaStreams(callType == 'video');
      await _createPeerConnection();

      final offer = await _peerConnection!.createOffer(_constraints);
      await _peerConnection!.setLocalDescription(offer);

      print('[WebRTC] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer —á–µ—Ä–µ–∑ WebSocket');
      WebSocketManager.instance.sendCallOffer(
        callId,
        chatId,
        callType,
        offer.toMap(),
        receiverId,
      );

      print('[WebRTC] ‚úÖ Offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      print('[WebRTC] ========================================');
    } catch (e, stackTrace) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞: $e');
      print('[WebRTC] Stack trace: $stackTrace');
      await endCall('error');
      rethrow;
    }
  }

  Future<void> _initializeMediaStreams(bool video) async {
    try {
      print('[WebRTC] üé• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞ —Å—Ç—Ä–∏–º–æ–≤ (–≤–∏–¥–µ–æ: $video)');

      final Map<String, dynamic> mediaConstraints = {
        'audio': true,
        'video': video
            ? {
                'mandatory': {
                  'minWidth': '640',
                  'minHeight': '480',
                  'minFrameRate': '30',
                },
                'facingMode': 'user',
              }
            : false,
      };

      _localStream =
          await navigator.mediaDevices.getUserMedia(mediaConstraints);
      _safeAddToLocalStream(_localStream);

      print('[WebRTC] ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º —Å–æ–∑–¥–∞–Ω');
    } catch (e) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞: $e');
      throw e;
    }
  }

  Future<void> _createPeerConnection() async {
    try {
      print('[WebRTC] üîó –°–æ–∑–¥–∞–Ω–∏–µ peer connection');

      _peerConnection = await createPeerConnection(_iceServers);

      if (_localStream != null) {
        _localStream!.getTracks().forEach((track) {
          _peerConnection!.addTrack(track, _localStream!);
        });
      }

      _peerConnection!.onIceCandidate = (RTCIceCandidate candidate) {
        print('[WebRTC] üßä –ù–æ–≤—ã–π ICE –∫–∞–Ω–¥–∏–¥–∞—Ç');
        if (_currentCall != null) {
          WebSocketManager.instance.sendIceCandidate(
            _currentCall!.id,
            candidate.toMap(),
          );
        }
      };

      _peerConnection!.onTrack = (RTCTrackEvent event) {
        print('[WebRTC] üì∫ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫');
        if (event.streams.isNotEmpty) {
          _remoteStream = event.streams.first;
          _safeAddToRemoteStream(_remoteStream);
        }
      };

      _peerConnection!.onConnectionState = (RTCPeerConnectionState state) {
        print('[WebRTC] üîå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $state');

        if (state == RTCPeerConnectionState.RTCPeerConnectionStateConnected) {
          if (_currentCall != null) {
            _currentCall = _currentCall!.copyWith(status: CallStatus.active);
            _safeAddToCallState(_currentCall);
          }
        } else if (state ==
                RTCPeerConnectionState.RTCPeerConnectionStateFailed ||
            state ==
                RTCPeerConnectionState.RTCPeerConnectionStateDisconnected) {
          endCall('connection_lost');
        }
      };

      print('[WebRTC] ‚úÖ Peer connection —Å–æ–∑–¥–∞–Ω');
    } catch (e) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è peer connection: $e');
      throw e;
    }
  }

  Future<void> _handleIncomingCall(Map<String, dynamic> message) async {
    try {
      print('[WebRTC] ========================================');
      print('[WebRTC] üìûüìûüìû –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö!');
      print('[WebRTC] ========================================');
      print('[WebRTC] –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $message');

      final callId = message['callId'] as String?;
      final chatId = message['chatId'] as String?;
      final callerId = message['callerId'] as String?;
      final callerName = message['callerName'] as String?;
      final callType = message['callType'] as String?;
      final offer = message['offer'] as Map<String, dynamic>?;

      print('[WebRTC] ========================================');
      print('[WebRTC] üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞:');
      print('[WebRTC]   - callId: $callId');
      print('[WebRTC]   - chatId: $chatId');
      print('[WebRTC]   - callerId: $callerId');
      print('[WebRTC]   - callerName: $callerName');
      print('[WebRTC]   - callType: $callType');
      print('[WebRTC]   - offer: ${offer != null ? "–ï–°–¢–¨ ‚úÖ" : "–ù–ï–¢ ‚ùå"}');

      if (offer != null) {
        print(
            '[WebRTC]   - offer.sdp: ${offer['sdp'] != null ? "–ï–°–¢–¨" : "–ù–ï–¢"}');
        print('[WebRTC]   - offer.type: ${offer['type']}');
        if (offer['sdp'] != null) {
          print('[WebRTC]   - offer.sdp size: ${offer['sdp'].length} bytes');
        }
      }
      print('[WebRTC] ========================================');

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (callId == null ||
          chatId == null ||
          callerId == null ||
          offer == null) {
        print('[WebRTC] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö!');
        print('[WebRTC]   Missing:');
        if (callId == null) print('[WebRTC]   - callId');
        if (chatId == null) print('[WebRTC]   - chatId');
        if (callerId == null) print('[WebRTC]   - callerId');
        if (offer == null) print('[WebRTC]   - offer');
        print('[WebRTC] ========================================');
        return;
      }

      // ‚≠ê‚≠ê‚≠ê –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º offer –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ
      _pendingOffer = offer;
      print('[WebRTC] ========================================');
      print('[WebRTC] ‚úÖ‚úÖ‚úÖ OFFER –°–û–•–†–ê–ù–ï–ù –í _pendingOffer!');
      print('[WebRTC] SDP size: ${offer['sdp']?.length ?? 0} bytes');
      print('[WebRTC] ========================================');

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Call –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
      _currentCall = Call(
        id: callId,
        chatId: chatId,
        callerId: callerId,
        callerName: callerName ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
        receiverId: _currentUserId!,
        receiverName: '–í—ã',
        callType: callType ?? 'audio',
        status: CallStatus.incoming,
        startTime: DateTime.now(),
      );

      print('[WebRTC] ========================================');
      print('[WebRTC] ‚úÖ –û–ë–™–ï–ö–¢ CALL –°–û–ó–î–ê–ù');
      print('[WebRTC] ========================================');
      print('[WebRTC]   - ID: ${_currentCall!.id}');
      print('[WebRTC]   - Status: ${_currentCall!.status}');
      print('[WebRTC]   - CallerName: ${_currentCall!.callerName}');
      print('[WebRTC]   - CallType: ${_currentCall!.callType}');
      print('[WebRTC] ========================================');

      // –ó–∞–ø—É—Å–∫–∞–µ–º CallActivity —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
      print('[WebRTC] üöÄüöÄüöÄ –ó–ê–ü–£–°–ö–ê–ï–ú CallActivity —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥!');
      try {
        await platform.invokeMethod('showCallScreen', {
          'callId': callId,
          'callerName': callerName ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
          'callType': callType ?? 'audio',
        });
        print('[WebRTC] ‚úÖ showCallScreen –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      } catch (e) {
        print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ showCallScreen: $e');
        print('[WebRTC] Stack trace: ${StackTrace.current}');
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ (–¥–ª—è fallback)
      print('[WebRTC] üì¢ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –í UI!');
      _safeAddToCallState(_currentCall);

      print('[WebRTC] ========================================');
      print('[WebRTC] ‚úÖ _handleIncomingCall –ó–ê–í–ï–†–®–ï–ù');
      print('[WebRTC] ========================================');
    } catch (e, stackTrace) {
      print('[WebRTC] ========================================');
      print('[WebRTC] ‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ _handleIncomingCall!');
      print('[WebRTC] –û—à–∏–±–∫–∞: $e');
      print('[WebRTC] Stack trace: $stackTrace');
      print('[WebRTC] ========================================');
    }
  }

  // ‚≠ê‚≠ê‚≠ê –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –£–ñ–ï –°–û–•–†–ê–ù–ï–ù–ù–´–ô offer –∏–∑ WebSocket
  Future<void> answerCall(String callId) async {
    try {
      print('[WebRTC] ========================================');
      print('[WebRTC] üìû answerCall() –≤—ã–∑–≤–∞–Ω');
      print('[WebRTC]   - callId: $callId');
      print('[WebRTC]   - _isAnswering: $_isAnswering');
      print('[WebRTC]   - _currentCall: ${_currentCall?.id}');
      print(
          '[WebRTC]   - _pendingOffer: ${_pendingOffer != null ? "–ï–°–¢–¨ ‚úÖ" : "–ù–ï–¢ ‚ùå"}');
      print('[WebRTC] ========================================');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–∂–µ
      if (_isAnswering) {
        print(
            '[WebRTC] ‚ö†Ô∏è answerCall —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤');
        return;
      }

      _isAnswering = true;

      // –ö–†–ò–¢–ò–ß–ù–û: –ó–≤–æ–Ω–æ–∫ –∏ offer –î–û–õ–ñ–ù–´ –±—ã—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ _handleIncomingCall!
      if (_currentCall == null || _currentCall!.id != callId) {
        print('[WebRTC] ‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        print('[WebRTC]   _currentCall: ${_currentCall?.id}');
        print('[WebRTC]   callId: $callId');
        _isAnswering = false;
        return;
      }

      if (_pendingOffer == null) {
        print('[WebRTC] ========================================');
        print('[WebRTC] ‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ offer!');
        print(
            '[WebRTC] –≠—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ call_offer –ù–ï –ë–´–õ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ WebSocket!');
        print(
            '[WebRTC] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç pending call_offer –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏!');
        print('[WebRTC] ========================================');
        _isAnswering = false;
        return;
      }

      print('[WebRTC] ========================================');
      print('[WebRTC] ‚úÖ‚úÖ‚úÖ –û–¢–í–ï–ß–ê–ï–ú –ù–ê –ó–í–û–ù–û–ö!');
      print('[WebRTC] ========================================');
      print('[WebRTC] CallId: $callId');
      print(
          '[WebRTC] Offer SDP size: ${_pendingOffer!['sdp']?.length ?? 0} bytes');

      _currentCall = _currentCall!.copyWith(status: CallStatus.connecting);
      _safeAddToCallState(_currentCall);

      await _initializeMediaStreams(_currentCall!.callType == 'video');
      await _createPeerConnection();

      print('[WebRTC] üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º remote description –∏–∑ offer');
      final offer = RTCSessionDescription(
        _pendingOffer!['sdp'],
        _pendingOffer!['type'],
      );
      await _peerConnection!.setRemoteDescription(offer);
      _isRemoteDescriptionSet = true;
      print('[WebRTC] ‚úÖ Remote description —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

      await _processIceCandidatesQueue();

      print('[WebRTC] üì§ –°–æ–∑–¥–∞–µ–º answer');
      final answer = await _peerConnection!.createAnswer(_constraints);
      await _peerConnection!.setLocalDescription(answer);

      print('[WebRTC] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º answer —á–µ—Ä–µ–∑ WebSocket');
      WebSocketManager.instance.sendCallAnswer(callId, answer.toMap());

      print('[WebRTC] ========================================');
      print('[WebRTC] ‚úÖ‚úÖ‚úÖ ANSWER –û–¢–ü–†–ê–í–õ–ï–ù –£–°–ü–ï–®–ù–û!');
      print('[WebRTC] ========================================');

      _isAnswering = false;
    } catch (e, stackTrace) {
      print('[WebRTC] ========================================');
      print('[WebRTC] ‚ùå‚ùå‚ùå –û–®–ò–ë–ö–ê –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫!');
      print('[WebRTC] –û—à–∏–±–∫–∞: $e');
      print('[WebRTC] Stack trace: $stackTrace');
      print('[WebRTC] ========================================');

      _isAnswering = false;

      await endCall('error');
    }
  }

  Future<void> _handleCallAnswer(Map<String, dynamic> message) async {
    try {
      print('[WebRTC] ========================================');
      print('[WebRTC] ‚úÖ –ü–æ–ª—É—á–µ–Ω answer');
      print('[WebRTC] ========================================');

      if (_peerConnection == null) {
        print('[WebRTC] ‚ùå Peer connection –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return;
      }

      final answer = RTCSessionDescription(
        message['answer']['sdp'],
        message['answer']['type'],
      );

      await _peerConnection!.setRemoteDescription(answer);
      _isRemoteDescriptionSet = true;

      await _processIceCandidatesQueue();

      if (_currentCall != null) {
        _currentCall = _currentCall!.copyWith(status: CallStatus.connecting);
        _safeAddToCallState(_currentCall);
      }

      print('[WebRTC] ‚úÖ Answer –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    } catch (e) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer: $e');
    }
  }

  Future<void> _handleIceCandidate(Map<String, dynamic> message) async {
    try {
      print('[WebRTC] üßä –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç');

      final candidate = RTCIceCandidate(
        message['candidate']['candidate'],
        message['candidate']['sdpMid'],
        message['candidate']['sdpMLineIndex'],
      );

      if (_peerConnection != null && _isRemoteDescriptionSet) {
        await _peerConnection!.addCandidate(candidate);
        print('[WebRTC] ‚úÖ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
      } else {
        _iceCandidatesQueue.add(candidate);
        print('[WebRTC] üìã ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å');
      }
    } catch (e) {
      print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: $e');
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç concurrent modification
  Future<void> _processIceCandidatesQueue() async {
    if (_iceCandidatesQueue.isEmpty) return;

    print(
        '[WebRTC] üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (${_iceCandidatesQueue.length})');

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å concurrent modification
    final candidatesToProcess = List<RTCIceCandidate>.from(_iceCandidatesQueue);
    _iceCandidatesQueue.clear();

    for (final candidate in candidatesToProcess) {
      try {
        await _peerConnection!.addCandidate(candidate);
      } catch (e) {
        print('[WebRTC] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: $e');
      }
    }

    print('[WebRTC] ‚úÖ –û—á–µ—Ä–µ–¥—å ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
  }

  void _handleCallEnded(Map<String, dynamic> message) {
    print('[WebRTC] ========================================');
    print('[WebRTC] üî¥ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${message['reason']}');
    print('[WebRTC] ========================================');

    _cleanup();

    if (_currentCall != null) {
      _currentCall = _currentCall!.copyWith(
        status: CallStatus.ended,
        endTime: DateTime.now(),
      );
      _safeAddToCallState(_currentCall);

      Future.delayed(Duration(seconds: 2), () {
        _currentCall = null;
        _pendingOffer = null;
        _safeAddToCallState(null);
      });
    }
  }

  void _handleCallDeclined(Map<String, dynamic> message) {
    print('[WebRTC] ========================================');
    print('[WebRTC] ‚ùå –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    print('[WebRTC] ========================================');

    _cleanup();

    if (_currentCall != null) {
      _currentCall = _currentCall!.copyWith(status: CallStatus.declined);
      _safeAddToCallState(_currentCall);

      Future.delayed(Duration(seconds: 2), () {
        _currentCall = null;
        _pendingOffer = null;
        _safeAddToCallState(null);
      });
    }
  }

  Future<void> declineCall(String callId) async {
    print('[WebRTC] ========================================');
    print('[WebRTC] ‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫');
    print('[WebRTC] ========================================');

    if (_currentCall != null && _currentCall!.id == callId) {
      WebSocketManager.instance.declineCall(callId);
      _cleanup();

      _currentCall = null;
      _pendingOffer = null;
      _safeAddToCallState(null);
    }
  }

  Future<void> toggleMute() async {
    if (_localStream != null) {
      final audioTrack = _localStream!.getAudioTracks().firstOrNull;
      if (audioTrack != null) {
        audioTrack.enabled = !audioTrack.enabled;
        print(
            '[WebRTC] üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω: ${audioTrack.enabled ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}');
      }
    }
  }

  Future<void> toggleVideo() async {
    if (_localStream != null) {
      final videoTrack = _localStream!.getVideoTracks().firstOrNull;
      if (videoTrack != null) {
        videoTrack.enabled = !videoTrack.enabled;
        print(
            '[WebRTC] üìπ –í–∏–¥–µ–æ: ${videoTrack.enabled ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ"}');
      }
    }
  }

  Future<void> toggleSpeaker() async {
    print('[WebRTC] üîä –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∞');
  }

  Future<void> acceptCall(String callId) async {
    return answerCall(callId);
  }

  Future<void> endCall([String? reason]) async {
    print('[WebRTC] ========================================');
    print('[WebRTC] üî¥ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫: ${reason ?? 'user'}');
    print('[WebRTC] ========================================');

    if (_currentCall != null) {
      WebSocketManager.instance.endCall(_currentCall!.id, reason ?? 'user');
      _cleanup();

      _currentCall = _currentCall!.copyWith(
        status: CallStatus.ended,
        endTime: DateTime.now(),
      );
      _safeAddToCallState(_currentCall);

      Future.delayed(Duration(seconds: 2), () {
        _currentCall = null;
        _pendingOffer = null;
        _safeAddToCallState(null);
      });
    }
  }

  void _cleanup() {
    print('[WebRTC] üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');

    try {
      if (_localStream != null) {
        _localStream!.getTracks().forEach((track) {
          try {
            track.stop();
          } catch (e) {
            print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–∫–∞: $e');
          }
        });

        try {
          _localStream!.dispose();
        } catch (e) {
          print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ dispose –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ stream: $e');
        }
      }
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ stream: $e');
    }

    _localStream = null;
    _safeAddToLocalStream(null);

    _remoteStream = null;
    _safeAddToRemoteStream(null);

    try {
      if (_peerConnection != null) {
        _peerConnection!.close();
      }
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ peer connection: $e');
    }

    _peerConnection = null;
    _iceCandidatesQueue.clear();
    _isRemoteDescriptionSet = false;

    print('[WebRTC] ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  void dispose() {
    print('[WebRTC] ========================================');
    print('[WebRTC] üóëÔ∏è Dispose —Å–µ—Ä–≤–∏—Å–∞');
    print('[WebRTC] ========================================');

    _cleanup();

    try {
      _wsSubscription?.cancel();
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ WebSocket: $e');
    }

    try {
      _callStateController?.close();
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è callStateController: $e');
    }

    try {
      _localStreamController?.close();
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è localStreamController: $e');
    }

    try {
      _remoteStreamController?.close();
    } catch (e) {
      print('[WebRTC] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è remoteStreamController: $e');
    }

    _callStateController = null;
    _localStreamController = null;
    _remoteStreamController = null;
    _currentCall = null;
    _pendingOffer = null;

    print('[WebRTC] ‚úÖ Dispose –∑–∞–≤–µ—Ä—à–µ–Ω');
  }
}
