// lib/services/websocket_manager.dart

import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:web_socket_channel/web_socket_channel.dart';
import 'package:web_socket_channel/status.dart' as status;
import 'api_service.dart';

enum ConnectionStatus { connecting, connected, disconnected, error }

class WebSocketManager {
  static WebSocketManager? _instance;
  static WebSocketManager get instance {
    _instance ??= WebSocketManager._internal();
    return _instance!;
  }

  WebSocketManager._internal();

  WebSocketChannel? _channel;
  StreamSubscription? _subscription;
  Timer? _pingTimer;
  Timer? _reconnectTimer;
  Timer? _connectionTimeoutTimer;

  String? _token;
  String? _userId;
  bool _isConnecting = false;
  bool _isAuthenticated = false;
  int _reconnectAttempts = 0;
  static const int _maxReconnectAttempts = 5;
  static const Duration _connectionTimeout = Duration(seconds: 10);

  final _statusController = StreamController<ConnectionStatus>.broadcast();
  final _messageController = StreamController<Map<String, dynamic>>.broadcast();

  final List<Map<String, dynamic>> _messageQueue = [];

  Stream<ConnectionStatus> get connectionStatus => _statusController.stream;
  Stream<Map<String, dynamic>> get messages => _messageController.stream;
  bool get isConnected =>
      _channel != null && _channel!.closeCode == null && _isAuthenticated;

  void _log(String message) {
    if (kDebugMode) {
      print('[WS Manager] $message');
    }
  }

  Future<void> connect({String? token, String? userId}) async {
    if (_channel != null && _channel!.closeCode == null) {
      _log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ');
      if (!_isAuthenticated && _token != null) {
        _log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
        await _authenticate();
      }
      return;
    }

    if (_isConnecting) {
      _log('–£–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∂–¥–µ–º...');
      return;
    }

    _isConnecting = true;
    _isAuthenticated = false;
    _token = token ?? _token;
    _userId = userId ?? _userId;

    if (_token == null) {
      _log('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      _isConnecting = false;
      _statusController.add(ConnectionStatus.error);
      return;
    }

    try {
      _statusController.add(ConnectionStatus.connecting);
      _log('–°–æ–∑–¥–∞–µ–º –ù–û–í–û–ï WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');

      if (_channel != null) {
        try {
          _channel!.sink.close();
        } catch (e) {
          _log('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ä–æ–≥–æ –∫–∞–Ω–∞–ª–∞: $e');
        }
        _channel = null;
      }

      _connectionTimeoutTimer?.cancel();
      _connectionTimeoutTimer = Timer(_connectionTimeout, () {
        if (!isConnected) {
          _log('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
          _handleConnectionError('Connection timeout');
        }
      });

      final wsUrl = ApiService.wsUrl;
      _log('WebSocket URL: $wsUrl');

      _channel = WebSocketChannel.connect(Uri.parse(wsUrl));

      _subscription?.cancel();
      _subscription = _channel!.stream.listen(
        (message) {
          _handleMessage(message);
        },
        onError: (error) {
          _log('–û—à–∏–±–∫–∞ WebSocket: $error');
          _handleConnectionError(error.toString());
        },
        onDone: () {
          _log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
          _handleDisconnection();
        },
      );

      await Future.delayed(Duration(milliseconds: 100));

      _log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
      final authMessage = {
        'type': 'auth',
        'token': _token!.replaceAll('"', ''),
        'userId': _userId,
      };

      _channel!.sink.add(json.encode(authMessage));
      _log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      _isConnecting = false;
      _handleConnectionError(e.toString());
    }
  }

  Future<void> _authenticate() async {
    if (_token == null) return;

    final authMessage = {
      'type': 'auth',
      'token': _token!.replaceAll('"', ''),
      'userId': _userId,
    };

    send(authMessage);
    _log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');

    Timer(Duration(seconds: 5), () {
      if (!_isAuthenticated && _isConnecting) {
        _log('–¢–∞–π–º–∞—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        _handleConnectionError('Authentication timeout');
      }
    });
  }

  void _handleMessage(dynamic message) {
    try {
      final data = json.decode(message.toString());
      _log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: ${data['type']}');

      switch (data['type']) {
        case 'auth_success':
        case '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è_—É—Å–ø–µ—à–Ω–∞':
          _handleAuthSuccess(data);
          break;

        case 'auth_error':
        case '–æ—à–∏–±–∫–∞_–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏':
          _handleAuthError(data);
          break;

        case 'message':
        case 'new_message':
        case '–Ω–æ–≤–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ':
          _log('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
          _messageController.add({
            'type': 'message',
            'message': data['message'] ?? data,
          });
          break;

        case 'message_sent':
          _log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
          _messageController.add({
            'type': 'message_sent',
            'tempId': data['tempId'],
            'message': data['message'],
          });
          break;

        case 'typing':
        case '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–ø–µ—á–∞—Ç–∞–µ—Ç':
          _log('‚å®Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç');
          _messageController.add({
            'type': 'typing',
            'chatId': data['chatId'],
            'userId': data['userId'],
            'userName': data['userName'],
            'isTyping': true
          });
          break;

        case 'stopped_typing':
        case '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–ø–µ—Ä–µ—Å—Ç–∞–ª_–ø–µ—á–∞—Ç–∞—Ç—å':
          _messageController.add({
            'type': 'stopped_typing',
            'chatId': data['chatId'],
            'userId': data['userId'],
            'isTyping': false
          });
          break;

        case 'user_online':
        case '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–æ–Ω–ª–∞–π–Ω':
          _log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data['userId']} –æ–Ω–ª–∞–π–Ω');
          _messageController.add({
            'type': 'user_online',
            'userId': data['userId'],
            'isOnline': true
          });
          break;

        case 'user_offline':
        case '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–æ—Ñ–ª–∞–π–Ω':
          _log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data['userId']} –æ—Ñ–ª–∞–π–Ω');
          _messageController.add({
            'type': 'user_offline',
            'userId': data['userId'],
            'isOnline': false
          });
          break;

        case 'message_read':
        case '—Å–æ–æ–±—â–µ–Ω–∏–µ_–ø—Ä–æ—á–∏—Ç–∞–Ω–æ':
          _messageController.add({
            'type': 'message_read',
            'chatId': data['chatId'],
            'messageId': data['messageId'],
            'userId': data['userId']
          });
          break;

        case 'chat_created':
          _messageController.add({
            'type': 'chat_created',
            'chat': data['chat'] ?? data,
          });
          break;

        case 'chat_deleted':
          _messageController.add({
            'type': 'chat_deleted',
            'chatId': data['chatId'],
          });
          break;

        // === –û–ë–†–ê–ë–û–¢–ö–ê –ó–í–û–ù–ö–û–í ===
        case 'call_offer':
          _log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫');
          _messageController.add({
            'type': 'call_offer',
            'callId': data['callId'],
            'chatId': data['chatId'],
            'callerId': data['callerId'],
            'callerName': data['callerName'],
            'callerAvatar': data['callerAvatar'],
            'callType': data['callType'],
            'offer': data['offer'],
          });
          break;

        case 'call_answer':
          _log('üìû –û—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫ –ø–æ–ª—É—á–µ–Ω');
          _messageController.add({
            'type': 'call_answer',
            'callId': data['callId'],
            'answer': data['answer'],
          });
          break;

        case 'call_ice_candidate':
          _log('üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–ª—É—á–µ–Ω');
          _messageController.add({
            'type': 'call_ice_candidate',
            'callId': data['callId'],
            'candidate': data['candidate'],
          });
          break;

        case 'call_ended':
          _log('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
          _messageController.add({
            'type': 'call_ended',
            'callId': data['callId'],
            'reason': data['reason'],
            'duration': data['duration'],
          });
          break;

        case 'call_declined':
          _log('üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
          _messageController.add({
            'type': 'call_declined',
            'callId': data['callId'],
          });
          break;

        case 'call_error':
          _log('üìû –û—à–∏–±–∫–∞ –∑–≤–æ–Ω–∫–∞: ${data['error']}');
          _messageController.add({
            'type': 'call_error',
            'callId': data['callId'],
            'error': data['error'],
            'message': data['message'],
          });
          break;

        case 'call_offer_sent':
          _log('üìû –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
          _messageController.add({
            'type': 'call_offer_sent',
            'callId': data['callId'],
            'status': data['status'],
          });
          break;

        case 'ping':
          send({'type': 'pong'});
          break;

        case 'pong':
          _log('–ü–æ–ª—É—á–µ–Ω pong');
          break;

        case 'error':
          _log('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${data['message']}');
          break;

        default:
          _log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${data['type']}');
      }
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  void _handleAuthSuccess(Map<String, dynamic> data) {
    _userId = data['userId']?.toString();
    _isAuthenticated = true;
    _isConnecting = false;
    _connectionTimeoutTimer?.cancel();
    _reconnectAttempts = 0;

    _log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. User ID: $_userId');

    _statusController.add(ConnectionStatus.connected);

    _sendQueuedMessages();
    _startPingTimer();

    _messageController.add({
      'type': 'auth_success',
      'userId': _userId,
    });
  }

  void _handleAuthError(Map<String, dynamic> data) {
    _log('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${data['error']}');
    _isAuthenticated = false;
    _isConnecting = false;
    _connectionTimeoutTimer?.cancel();

    _messageController.add({
      'type': 'auth_error',
      'error': data['error'],
    });

    _statusController.add(ConnectionStatus.error);
    disconnect();
  }

  void _handleConnectionError(String error) {
    _log('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $error');
    _isConnecting = false;
    _isAuthenticated = false;
    _connectionTimeoutTimer?.cancel();
    _statusController.add(ConnectionStatus.error);
    _scheduleReconnect();
  }

  void _handleDisconnection() {
    _log('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ');
    _isConnecting = false;
    _isAuthenticated = false;
    _connectionTimeoutTimer?.cancel();
    _statusController.add(ConnectionStatus.disconnected);
    _scheduleReconnect();
  }

  void send(Map<String, dynamic> data) {
    if (_channel == null) {
      _log(
          'WebSocket –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: ${data['type']}');
      _messageQueue.add(data);
      return;
    }

    if (_channel!.closeCode != null) {
      _log(
          'WebSocket –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç (–∫–æ–¥: ${_channel!.closeCode}), –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: ${data['type']}');
      _messageQueue.add(data);
      return;
    }

    if (data['type'] != 'auth' && data['type'] != 'ping' && !_isAuthenticated) {
      _log('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: ${data['type']}');
      _messageQueue.add(data);
      return;
    }

    try {
      final message = json.encode(data);
      _channel!.sink.add(message);
      _log('‚Üë –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${data['type']}');
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: $e');
      if (data['type'] != 'auth') {
        _messageQueue.add(data);
      }
      if (!_isConnecting) {
        _handleConnectionError('Send failed: $e');
      }
    }
  }

  void _sendQueuedMessages() {
    if (_messageQueue.isEmpty) return;

    _log('–û—Ç–ø—Ä–∞–≤–∫–∞ ${_messageQueue.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏');
    final queue = List<Map<String, dynamic>>.from(_messageQueue);
    _messageQueue.clear();

    for (final message in queue) {
      send(message);
    }
  }

  void sendMessage(Map<String, dynamic> message) {
    final data = {
      'type': 'send_message',
      'chatId': message['chatId'],
      'content': message['content'],
      'messageType': message['messageType'] ?? 'text',
      'tempId': message['tempId'],
      'replyToId': message['replyToId'],
    };

    send(data);
  }

  void sendTyping(String chatId, bool isTyping) {
    send({
      'type': isTyping ? 'typing' : 'stopped_typing',
      'chatId': chatId,
      'userId': _userId,
    });
  }

  void joinChat(String chatId) {
    send({
      'type': 'join_chat',
      'chatId': chatId,
    });
  }

  void leaveChat(String chatId) {
    send({
      'type': 'leave_chat',
      'chatId': chatId,
    });
  }

  void markAsRead(String chatId, String? messageId) {
    send({
      'type': 'mark_read',
      'chatId': chatId,
      'messageId': messageId,
    });
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –ó–í–û–ù–ö–û–í ===
  void sendCallOffer(String callId, String chatId, String callType,
      Map<String, dynamic> offer, String receiverId) {
    send({
      'type': 'call_offer',
      'callId': callId,
      'chatId': chatId,
      'receiverId': receiverId, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
      'callType': callType,
      'offer': offer,
    });
  }

  void sendCallAnswer(String callId, Map<String, dynamic> answer) {
    send({
      'type': 'call_answer',
      'callId': callId,
      'answer': answer,
    });
  }

  void sendIceCandidate(String callId, Map<String, dynamic> candidate) {
    send({
      'type': 'call_ice_candidate',
      'callId': callId,
      'candidate': candidate,
    });
  }

  void endCall(String callId, String reason) {
    send({
      'type': 'call_end',
      'callId': callId,
      'reason': reason,
    });
  }

  void declineCall(String callId) {
    send({
      'type': 'call_decline',
      'callId': callId,
    });
  }

  void _startPingTimer() {
    _pingTimer?.cancel();
    _pingTimer = Timer.periodic(const Duration(seconds: 30), (_) {
      if (isConnected) {
        send({
          'type': 'ping',
          'timestamp': DateTime.now().toIso8601String(),
        });
        _log('‚Üë Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      }
    });
  }

  void _scheduleReconnect() {
    if (_reconnectTimer != null ||
        _reconnectAttempts >= _maxReconnectAttempts) {
      return;
    }

    _reconnectAttempts++;
    final delay = Duration(seconds: _reconnectAttempts * 2);

    _log(
        '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay.inSeconds} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ $_reconnectAttempts)');

    _reconnectTimer = Timer(delay, () {
      _reconnectTimer = null;
      if (!isConnected && _token != null) {
        connect(token: _token, userId: _userId);
      }
    });
  }

  void disconnect() {
    _log('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket');

    _pingTimer?.cancel();
    _reconnectTimer?.cancel();
    _connectionTimeoutTimer?.cancel();
    _subscription?.cancel();

    try {
      _channel?.sink.close(status.normalClosure);
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–∞–Ω–∞–ª–∞: $e');
    }

    _channel = null;
    _isConnecting = false;
    _isAuthenticated = false;
    _reconnectAttempts = 0;
    _messageQueue.clear();

    _statusController.add(ConnectionStatus.disconnected);
  }

  void reconnect() {
    disconnect();
    if (_token != null) {
      connect(token: _token, userId: _userId);
    }
  }

  void dispose() {
    disconnect();
    _statusController.close();
    _messageController.close();
  }
}
