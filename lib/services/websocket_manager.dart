// lib/services/websocket_manager.dart

import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:web_socket_channel/web_socket_channel.dart';
import 'api_service.dart';

class WebSocketManager {
  static final WebSocketManager _instance = WebSocketManager._internal();
  static WebSocketManager get instance => _instance;

  WebSocketChannel? _channel;
  final _messageController = StreamController<Map<String, dynamic>>.broadcast();
  Timer? _reconnectTimer;
  Timer? _pingTimer;
  bool _isConnecting = false;
  int _reconnectAttempts = 0;
  static const int _maxReconnectAttempts = 5;
  static const Duration _reconnectDelay = Duration(seconds: 3);
  static const Duration _pingInterval = Duration(seconds: 30);

  final ApiService _api = ApiService();

  WebSocketManager._internal();

  Stream<Map<String, dynamic>> get messages => _messageController.stream;

  bool get isConnected => _channel != null;

  void _log(String message) {
    if (kDebugMode) {
      print('[WebSocket] $message');
    }
  }

  Future<void> connect() async {
    if (_isConnecting || isConnected) {
      _log('–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –∏–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
      return;
    }

    _isConnecting = true;
    _log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...');

    try {
      final token = _api.token;
      if (token == null || token.isEmpty) {
        _log('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        _isConnecting = false;
        return;
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ñ–æ—Ä–º–∏—Ä—É–µ–º wsUrl –≤—Ä—É—á–Ω—É—é, —Ç–∞–∫ –∫–∞–∫ ApiService –Ω–µ –∏–º–µ–µ—Ç wsUrl
      final wsUrl = _getWebSocketUrl();
      _log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: $wsUrl');

      final uri = Uri.parse('$wsUrl?token=$token');
      _channel = WebSocketChannel.connect(uri);

      _channel!.stream.listen(
        _handleMessage,
        onError: _handleError,
        onDone: _handleDisconnect,
        cancelOnError: false,
      );

      _reconnectAttempts = 0;
      _isConnecting = false;
      _startPingTimer();
      _log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } catch (e) {
      _log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      _isConnecting = false;
      _scheduleReconnect();
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è WebSocket URL
  String _getWebSocketUrl() {
    if (kIsWeb) {
      // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ URL
      final protocol = Uri.base.scheme == 'https' ? 'wss' : 'ws';
      final host = Uri.base.host;
      final port = Uri.base.hasPort ? ':${Uri.base.port}' : '';
      return '$protocol://$host$port/backend/ws';
    } else {
      // –î–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
      return 'wss://securewave.sbk-19.ru/backend/ws';
    }
  }

  void _handleMessage(dynamic data) {
    try {
      final message = jsonDecode(data.toString()) as Map<String, dynamic>;
      _log('üì® –ü–æ–ª—É—á–µ–Ω–æ: ${message['type']}');
      _messageController.add(message);
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  void _handleError(error) {
    _log('‚ùå –û—à–∏–±–∫–∞ WebSocket: $error');
    _scheduleReconnect();
  }

  void _handleDisconnect() {
    _log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    _channel = null;
    _pingTimer?.cancel();
    _scheduleReconnect();
  }

  void _scheduleReconnect() {
    if (_reconnectAttempts >= _maxReconnectAttempts) {
      _log('‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      return;
    }

    _reconnectTimer?.cancel();
    _reconnectAttempts++;

    _log(
        'üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${_reconnectDelay.inSeconds}—Å (–ø–æ–ø—ã—Ç–∫–∞ $_reconnectAttempts/$_maxReconnectAttempts)');

    _reconnectTimer = Timer(_reconnectDelay, () {
      connect();
    });
  }

  void _startPingTimer() {
    _pingTimer?.cancel();
    _pingTimer = Timer.periodic(_pingInterval, (_) {
      if (isConnected) {
        send({'type': 'ping'});
      }
    });
  }

  void send(Map<String, dynamic> message) {
    if (!isConnected) {
      _log('‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket');
      return;
    }

    try {
      final json = jsonEncode(message);
      _channel!.sink.add(json);
      _log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message['type']}');
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: $e');
    }
  }

  void disconnect() {
    _log('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket');
    _reconnectTimer?.cancel();
    _pingTimer?.cancel();
    _channel?.sink.close();
    _channel = null;
    _reconnectAttempts = 0;
  }

  void dispose() {
    disconnect();
    _messageController.close();
  }
}
