// lib/services/notification_handler_service.dart

import 'package:flutter/services.dart';
import 'package:flutter/material.dart';

class NotificationHandlerService {
  static final NotificationHandlerService _instance =
      NotificationHandlerService._internal();
  factory NotificationHandlerService() => _instance;

  NotificationHandlerService._internal();

  static const platform = MethodChannel('com.securewave.app/notification');

  BuildContext? _context;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> initialize(BuildContext context) async {
    _context = context;

    print('[NotificationHandler] ========================================');
    print('[NotificationHandler] üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NotificationHandlerService');
    print('[NotificationHandler] ========================================');

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    platform.setMethodCallHandler((call) async {
      print('[NotificationHandler] ========================================');
      print('[NotificationHandler] üì® –ü–æ–ª—É—á–µ–Ω –≤—ã–∑–æ–≤: ${call.method}');
      print('[NotificationHandler] ========================================');

      if (call.method == 'onNotificationTap') {
        final data = Map<String, dynamic>.from(call.arguments);
        print('[NotificationHandler] üì¶ –î–∞–Ω–Ω—ã–µ: $data');
        await _handleNotificationTap(data);
      }
    });

    print('[NotificationHandler] ‚úÖ –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    print('[NotificationHandler] ========================================');
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
  Future<void> _handleNotificationTap(Map<String, dynamic> data) async {
    final type = data['type'];

    print('[NotificationHandler] ========================================');
    print('[NotificationHandler] üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é');
    print('[NotificationHandler] Type: $type');
    print('[NotificationHandler] ========================================');

    if (_context == null) {
      print(
          '[NotificationHandler] ‚ö†Ô∏è Context is null, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω');
      return;
    }

    switch (type) {
      case 'new_message':
        final chatId = data['chatId'];
        print('[NotificationHandler] üí¨ –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç: $chatId');
        // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —á–∞—Ç—É
        break;

      case 'incoming_call':
        final callId = data['callId'];
        final callerName = data['callerName'];
        final callType = data['callType'];
        final action = data['action'];

        print('[NotificationHandler] ========================================');
        print('[NotificationHandler] üìû –û–ë–†–ê–ë–û–¢–ö–ê –í–•–û–î–Ø–©–ï–ì–û –ó–í–û–ù–ö–ê');
        print('[NotificationHandler] ========================================');
        print('[NotificationHandler] CallId: $callId');
        print('[NotificationHandler] CallerName: $callerName');
        print('[NotificationHandler] CallType: $callType');
        print('[NotificationHandler] Action: $action');

        if (action == 'accept') {
          print('[NotificationHandler] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ü–†–ò–ù–Ø–¢–¨ –∑–≤–æ–Ω–æ–∫');
          // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å CallScreen –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫
          // TODO: –û—Ç–∫—Ä—ã—Ç—å CallScreen —Å auto-accept
        } else if (action == 'decline') {
          print('[NotificationHandler] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –û–¢–ö–õ–û–ù–ò–¢–¨ –∑–≤–æ–Ω–æ–∫');
          // TODO: –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ WebRTC Service
        } else {
          print(
              '[NotificationHandler] üì± –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–∞');
          // –ó–≤–æ–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ CallOverlay
        }

        print('[NotificationHandler] ========================================');
        break;

      default:
        print('[NotificationHandler] ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: $type');
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ —Å–º–µ–Ω–µ —ç–∫—Ä–∞–Ω–∞)
  void updateContext(BuildContext context) {
    _context = context;
  }
}
