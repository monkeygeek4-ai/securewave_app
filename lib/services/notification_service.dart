// lib/services/notification_service.dart

import 'dart:async';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter/foundation.dart';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å top-level —Ñ—É–Ω–∫—Ü–∏–µ–π)
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  print('[FCM] üîî –§–æ–Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message.messageId}');
  print('[FCM] –î–∞–Ω–Ω—ã–µ: ${message.data}');
}

class NotificationService {
  static NotificationService? _instance;
  static NotificationService get instance {
    _instance ??= NotificationService._internal();
    return _instance!;
  }

  NotificationService._internal();

  final FirebaseMessaging _fcm = FirebaseMessaging.instance;
  final FlutterLocalNotificationsPlugin _localNotifications =
      FlutterLocalNotificationsPlugin();

  String? _fcmToken;
  String? get fcmToken => _fcmToken;

  // Stream –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  final StreamController<Map<String, dynamic>> _notificationClickController =
      StreamController<Map<String, dynamic>>.broadcast();
  Stream<Map<String, dynamic>> get onNotificationClick =>
      _notificationClickController.stream;

  Future<void> initialize() async {
    print('[Notifications] ========================================');
    print('[Notifications] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    print('[Notifications] ========================================');

    try {
      // 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      await _requestPermissions();

      // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await _initializeLocalNotifications();

      // 3. –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω
      await _getFCMToken();

      // 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FCM
      _setupFCMHandlers();

      // 5. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      FirebaseMessaging.onBackgroundMessage(
          _firebaseMessagingBackgroundHandler);

      print('[Notifications] ‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      print('[Notifications] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  Future<void> _requestPermissions() async {
    print('[Notifications] üìã –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...');

    final settings = await _fcm.requestPermission(
      alert: true,
      announcement: true,
      badge: true,
      carPlay: false,
      criticalAlert: true,
      provisional: false,
      sound: true,
    );

    print('[Notifications] –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${settings.authorizationStatus}');

    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      print('[Notifications] ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');
    } else if (settings.authorizationStatus ==
        AuthorizationStatus.provisional) {
      print('[Notifications] ‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è');
    } else {
      print('[Notifications] ‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
    }
  }

  Future<void> _initializeLocalNotifications() async {
    print('[Notifications] üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    // Android –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const androidSettings =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    // iOS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    await _localNotifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android
    if (!kIsWeb) {
      const androidChannel = AndroidNotificationChannel(
        'high_importance_channel',
        '–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        description: '–ö–∞–Ω–∞–ª –¥–ª—è –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        importance: Importance.high,
        playSound: true,
        enableVibration: true,
      );

      await _localNotifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(androidChannel);

      // –ö–∞–Ω–∞–ª –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
      const callChannel = AndroidNotificationChannel(
        'call_channel',
        '–í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏',
        description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö',
        importance: Importance.max,
        playSound: true,
        enableVibration: true,
        sound: RawResourceAndroidNotificationSound('ringtone'),
      );

      await _localNotifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(callChannel);
    }

    print('[Notifications] ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  Future<void> _getFCMToken() async {
    try {
      _fcmToken = await _fcm.getToken();
      print('[Notifications] ========================================');
      print('[Notifications] üîë FCM Token –ø–æ–ª—É—á–µ–Ω:');
      print('[Notifications] $_fcmToken');
      print('[Notifications] ========================================');

      // TODO: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
      // await _sendTokenToServer(_fcmToken!);

      // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      _fcm.onTokenRefresh.listen((newToken) {
        print('[Notifications] üîÑ FCM Token –æ–±–Ω–æ–≤–ª–µ–Ω: $newToken');
        _fcmToken = newToken;
        // TODO: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        // _sendTokenToServer(newToken);
      });
    } catch (e) {
      print('[Notifications] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  void _setupFCMHandlers() {
    print('[Notifications] üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ FCM...');

    // –ö–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ foreground
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('[Notifications] ========================================');
      print('[Notifications] üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ (foreground)');
      print('[Notifications] –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${message.notification?.title}');
      print('[Notifications] –¢–µ–∫—Å—Ç: ${message.notification?.body}');
      print('[Notifications] –î–∞–Ω–Ω—ã–µ: ${message.data}');
      print('[Notifications] ========================================');

      _handleForegroundMessage(message);
    });

    // –ö–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('[Notifications] ========================================');
      print('[Notifications] üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      print('[Notifications] –î–∞–Ω–Ω—ã–µ: ${message.data}');
      print('[Notifications] ========================================');

      _handleNotificationClick(message.data);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    _fcm.getInitialMessage().then((RemoteMessage? message) {
      if (message != null) {
        print('[Notifications] ========================================');
        print('[Notifications] üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        print('[Notifications] –î–∞–Ω–Ω—ã–µ: ${message.data}');
        print('[Notifications] ========================================');

        _handleNotificationClick(message.data);
      }
    });

    print('[Notifications] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FCM –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  void _handleForegroundMessage(RemoteMessage message) {
    final type = message.data['type'];

    if (type == 'call') {
      // –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
      _showCallNotification(
        title: message.notification?.title ?? '–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫',
        body: message.notification?.body ?? '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞',
        payload: message.data,
      );
    } else if (type == 'message') {
      // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      _showMessageNotification(
        title: message.notification?.title ?? '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        body: message.notification?.body ?? '',
        payload: message.data,
      );
    } else {
      // –û–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      _showNotification(
        title: message.notification?.title ?? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        body: message.notification?.body ?? '',
        payload: message.data,
      );
    }
  }

  Future<void> _showCallNotification({
    required String title,
    required String body,
    required Map<String, dynamic> payload,
  }) async {
    print('[Notifications] üìû –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ');

    const androidDetails = AndroidNotificationDetails(
      'call_channel',
      '–í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏',
      channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
      sound: RawResourceAndroidNotificationSound('ringtone'),
      enableVibration: true,
      fullScreenIntent: true,
      category: AndroidNotificationCategory.call,
      visibility: NotificationVisibility.public,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'ringtone.aiff',
      categoryIdentifier: 'call',
    );

    const notificationDetails = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _localNotifications.show(
      payload['callId'].hashCode,
      title,
      body,
      notificationDetails,
      payload: _encodePayload(payload),
    );
  }

  Future<void> _showMessageNotification({
    required String title,
    required String body,
    required Map<String, dynamic> payload,
  }) async {
    print('[Notifications] üí¨ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏');

    const androidDetails = AndroidNotificationDetails(
      'high_importance_channel',
      '–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      channelDescription: '–ö–∞–Ω–∞–ª –¥–ª—è –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      importance: Importance.high,
      priority: Priority.high,
      playSound: true,
      enableVibration: true,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const notificationDetails = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _localNotifications.show(
      payload['chatId'].hashCode,
      title,
      body,
      notificationDetails,
      payload: _encodePayload(payload),
    );
  }

  Future<void> _showNotification({
    required String title,
    required String body,
    required Map<String, dynamic> payload,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      'high_importance_channel',
      '–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      channelDescription: '–ö–∞–Ω–∞–ª –¥–ª—è –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      importance: Importance.high,
      priority: Priority.high,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const notificationDetails = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _localNotifications.show(
      DateTime.now().millisecondsSinceEpoch ~/ 1000,
      title,
      body,
      notificationDetails,
      payload: _encodePayload(payload),
    );
  }

  void _onNotificationTapped(NotificationResponse response) {
    print('[Notifications] ========================================');
    print('[Notifications] üëÜ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    print('[Notifications] Payload: ${response.payload}');
    print('[Notifications] ========================================');

    if (response.payload != null) {
      final data = _decodePayload(response.payload!);
      _handleNotificationClick(data);
    }
  }

  void _handleNotificationClick(Map<String, dynamic> data) {
    print('[Notifications] üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    print('[Notifications] –¢–∏–ø: ${data['type']}');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ stream
    _notificationClickController.add(data);
  }

  String _encodePayload(Map<String, dynamic> data) {
    return data.entries.map((e) => '${e.key}:${e.value}').join('|');
  }

  Map<String, dynamic> _decodePayload(String payload) {
    final map = <String, dynamic>{};
    for (final pair in payload.split('|')) {
      final parts = pair.split(':');
      if (parts.length == 2) {
        map[parts[0]] = parts[1];
      }
    }
    return map;
  }

  Future<void> cancelNotification(int id) async {
    await _localNotifications.cancel(id);
  }

  Future<void> cancelAllNotifications() async {
    await _localNotifications.cancelAll();
  }

  void dispose() {
    _notificationClickController.close();
  }
}
