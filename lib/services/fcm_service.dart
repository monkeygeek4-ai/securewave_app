// lib/services/fcm_service.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'api_service.dart';

class FCMService {
  static final FCMService _instance = FCMService._internal();
  factory FCMService() => _instance;

  FCMService._internal();

  static const platform = MethodChannel('com.securewave.app/fcm');

  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  String? _fcmToken;

  String? get fcmToken => _fcmToken;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FCM
  Future<void> initialize() async {
    print('[FCM] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FCM Service');

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    await _requestPermissions();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    await _getToken();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    _setupListeners();

    print('[FCM] ‚úÖ FCM Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  Future<void> _requestPermissions() async {
    print('[FCM] üì± –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');

    NotificationSettings settings = await _firebaseMessaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );

    print('[FCM] üîî –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${settings.authorizationStatus}');

    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      print('[FCM] ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');
    } else if (settings.authorizationStatus ==
        AuthorizationStatus.provisional) {
      print('[FCM] ‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');
    } else {
      print('[FCM] ‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  Future<String?> _getToken() async {
    try {
      print('[FCM] üîë –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞...');

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ Firebase
      String? token = await _firebaseMessaging.getToken();

      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ - –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–¥–∞ (–¥–ª—è Android)
      if (token == null) {
        print(
            '[FCM] üîç –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç Firebase, –ø—Ä–æ–±—É–µ–º SharedPreferences...');
        try {
          token = await platform.invokeMethod('getFCMToken');
        } catch (e) {
          print('[FCM] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ SharedPreferences: $e');
        }
      }

      if (token != null) {
        _fcmToken = token;
        print('[FCM] ‚úÖ FCM —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${token.substring(0, 20)}...');

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
        await _registerTokenOnBackend(token);
      } else {
        print('[FCM] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FCM —Ç–æ–∫–µ–Ω');
      }

      return token;
    } catch (e) {
      print('[FCM] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: $e');
      return null;
    }
  }

  /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
  Future<void> _registerTokenOnBackend(String token) async {
    try {
      print('[FCM] üì§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ...');

      final apiService = ApiService();
      final response = await apiService.registerFCMToken(token, 'android');

      if (response != null && response['success'] == true) {
        print('[FCM] ‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ');
      } else {
        print('[FCM] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ');
      }
    } catch (e) {
      print('[FCM] ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  void _setupListeners() {
    print('[FCM] üëÇ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    _firebaseMessaging.onTokenRefresh.listen((newToken) {
      print('[FCM] üîÑ FCM —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
      _fcmToken = newToken;
      _registerTokenOnBackend(newToken);
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('[FCM] üì© –ü–æ–ª—É—á–µ–Ω–æ foreground —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      print('[FCM] üì¶ –î–∞–Ω–Ω—ã–µ: ${message.data}');

      if (message.notification != null) {
        print('[FCM] üîî –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${message.notification?.title}');
        print('[FCM] üí¨ –¢–µ–∫—Å—Ç: ${message.notification?.body}');
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å UI
      _handleForegroundMessage(message);
    });

    // –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('[FCM] üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ)');
      print('[FCM] üì¶ –î–∞–Ω–Ω—ã–µ: ${message.data}');
      _handleNotificationClick(message.data);
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (Android)
    platform.setMethodCallHandler((call) async {
      if (call.method == 'onNotificationClick') {
        final data = Map<String, dynamic>.from(call.arguments);
        print('[FCM] üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é (–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ)');
        print('[FCM] üì¶ –î–∞–Ω–Ω—ã–µ: $data');
        _handleNotificationClick(data);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    _checkInitialMessage();
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ)
  Future<void> _checkInitialMessage() async {
    RemoteMessage? initialMessage =
        await _firebaseMessaging.getInitialMessage();

    if (initialMessage != null) {
      print('[FCM] üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      print('[FCM] üì¶ –î–∞–Ω–Ω—ã–µ: ${initialMessage.data}');
      _handleNotificationClick(initialMessage.data);
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
  void _handleForegroundMessage(RemoteMessage message) {
    final type = message.data['type'];

    switch (type) {
      case 'new_message':
        print('[FCM] üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (foreground)');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        break;
      case 'incoming_call':
        print('[FCM] üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ (foreground)');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        break;
      default:
        print('[FCM] üì¶ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $type');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
  void _handleNotificationClick(Map<String, dynamic> data) {
    final type = data['type'];

    switch (type) {
      case 'new_message':
        final chatId = data['chatId'];
        print('[FCM] üí¨ –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç: $chatId');
        // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —á–∞—Ç—É
        break;

      case 'incoming_call':
        final callId = data['callId'];
        final action = data['action'];
        print('[FCM] üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞: $callId, –¥–µ–π—Å—Ç–≤–∏–µ: $action');

        if (action == 'accept') {
          print('[FCM] ‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞');
          // TODO: –ü—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫
        } else if (action == 'decline') {
          print('[FCM] ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞');
          // TODO: –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫
        }
        break;

      default:
        print('[FCM] ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–∏–∫–∞: $type');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
  Future<String?> getToken() async {
    if (_fcmToken != null) {
      return _fcmToken;
    }
    return await _getToken();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
  Future<void> refreshToken() async {
    final token = await getToken();
    if (token != null) {
      await _registerTokenOnBackend(token);
    }
  }
}
