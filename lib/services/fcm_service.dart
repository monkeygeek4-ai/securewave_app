// lib/services/fcm_service.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter/foundation.dart';
import 'dart:io' show Platform;
import 'api_service.dart';

class FCMService {
  static final FCMService _instance = FCMService._internal();
  factory FCMService() => _instance;

  FCMService._internal();

  static const platform = MethodChannel('com.securewave.app/fcm');

  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  FlutterLocalNotificationsPlugin? _localNotifications;
  String? _fcmToken;

  String? get fcmToken => _fcmToken;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FCM
  Future<void> initialize() async {
    print('[FCM] ========================================');
    print('[FCM] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FCM Service');
    print('[FCM] –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${kIsWeb ? "Web" : Platform.operatingSystem}');
    print('[FCM] ========================================');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Android
    if (!kIsWeb && Platform.isAndroid) {
      await _initializeLocalNotifications();
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    await _requestPermissions();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    await _getToken();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    _setupListeners();

    print('[FCM] ‚úÖ FCM Service –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    print('[FCM] ========================================');
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android
  Future<void> _initializeLocalNotifications() async {
    print('[FCM] üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    try {
      _localNotifications = FlutterLocalNotificationsPlugin();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Android
      const initializationSettingsAndroid =
          AndroidInitializationSettings('@mipmap/ic_launcher');

      const initializationSettings =
          InitializationSettings(android: initializationSettingsAndroid);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
      await _localNotifications!.initialize(
        initializationSettings,
        onDidReceiveNotificationResponse: _onNotificationTap,
        onDidReceiveBackgroundNotificationResponse:
            _onBackgroundNotificationTap,
      );

      // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await _createNotificationChannels();

      print('[FCM] ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (e) {
      print('[FCM] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _createNotificationChannels() async {
    if (_localNotifications == null) return;

    print('[FCM] üì¢ –°–æ–∑–¥–∞–Ω–∏–µ notification channels...');

    try {
      // –ö–∞–Ω–∞–ª –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
      const callsChannel = AndroidNotificationChannel(
        'calls_channel',
        'Incoming Calls',
        description: 'Notifications for incoming calls',
        importance: Importance.max,
        playSound: true,
        enableVibration: true,
        enableLights: true,
        showBadge: true,
      );

      // –ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
      const messagesChannel = AndroidNotificationChannel(
        'messages_channel',
        'Messages',
        description: 'Notifications for new messages',
        importance: Importance.high,
        playSound: true,
        enableVibration: true,
      );

      // –ü–æ–ª—É—á–∞–µ–º Android implementation - –í–°–Å –í –û–î–ù–û–ô –°–¢–†–û–ö–ï!
      final android = _localNotifications!
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>();

      if (android != null) {
        await android.createNotificationChannel(callsChannel);
        await android.createNotificationChannel(messagesChannel);
        print('[FCM] ‚úÖ Notification channels —Å–æ–∑–¥–∞–Ω—ã');
      } else {
        print('[FCM] ‚ö†Ô∏è Android plugin –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (e) {
      print('[FCM] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è channels: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é (foreground/background)
  void _onNotificationTap(NotificationResponse response) {
    print('[FCM] ========================================');
    print('[FCM] üëÜ –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é (foreground)');
    print('[FCM] Action ID: ${response.actionId}');
    print('[FCM] Payload: ${response.payload}');
    print('[FCM] ========================================');

    _handleNotificationAction(response.actionId, response.payload);
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é (terminated state)
  @pragma('vm:entry-point')
  static void _onBackgroundNotificationTap(NotificationResponse response) {
    print('[FCM] ========================================');
    print('[FCM] üëÜ –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é (background/terminated)');
    print('[FCM] Action ID: ${response.actionId}');
    print('[FCM] Payload: ${response.payload}');
    print('[FCM] ========================================');
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
  void _handleNotificationAction(String? actionId, String? payload) {
    if (payload == null) return;

    print('[FCM] üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: $actionId');
    print('[FCM] üì¶ Payload: $payload');

    // –ü–∞—Ä—Å–∏–º payload: "type:id:extra"
    final parts = payload.split(':');
    if (parts.isEmpty) return;

    final type = parts[0];

    switch (type) {
      case 'call':
        if (parts.length >= 3) {
          final callId = parts[1];
          final callerName = parts[2];

          print('[FCM] ========================================');
          print('[FCM] üìû –î–ï–ô–°–¢–í–ò–ï –°–û –ó–í–û–ù–ö–û–ú');
          print('[FCM] Call ID: $callId');
          print('[FCM] Caller: $callerName');
          print('[FCM] Action: $actionId');
          print('[FCM] ========================================');

          if (actionId == 'accept') {
            print('[FCM] ‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
            // TODO: –û—Ç–∫—Ä—ã—Ç—å CallScreen –∏ –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫
          } else if (actionId == 'decline') {
            print('[FCM] ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
            cancelCallNotification(callId);
          } else {
            print('[FCM] üì± –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–≤–æ–Ω–∫–∞');
          }
        }
        break;

      case 'message':
        if (parts.length >= 2) {
          final chatId = parts[1];
          print('[FCM] üí¨ –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞: $chatId');
          // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —á–∞—Ç—É
        }
        break;

      default:
        print('[FCM] ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: $type');
    }
  }

  /// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  Future<void> _requestPermissions() async {
    print('[FCM] üì± –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');

    try {
      final settings = await _firebaseMessaging.requestPermission(
        alert: true,
        announcement: true,
        badge: true,
        carPlay: false,
        criticalAlert: true,
        provisional: false,
        sound: true,
      );

      print('[FCM] üîî –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${settings.authorizationStatus}');

      if (settings.authorizationStatus == AuthorizationStatus.authorized) {
        print('[FCM] ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º presentation options
        await _firebaseMessaging.setForegroundNotificationPresentationOptions(
          alert: true,
          badge: true,
          sound: true,
        );
      } else if (settings.authorizationStatus ==
          AuthorizationStatus.provisional) {
        print('[FCM] ‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');
      } else {
        print('[FCM] ‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
      }
    } catch (e) {
      print('[FCM] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  Future<String?> _getToken() async {
    try {
      print('[FCM] üîë –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞...');

      String? token = await _firebaseMessaging.getToken();

      if (token == null && !kIsWeb && Platform.isAndroid) {
        print('[FCM] üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ SharedPreferences...');
        try {
          token = await platform.invokeMethod('getFCMToken');
        } catch (e) {
          print('[FCM] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ SharedPreferences: $e');
        }
      }

      if (token != null) {
        _fcmToken = token;
        print('[FCM] ‚úÖ FCM —Ç–æ–∫–µ–Ω: ${token.substring(0, 30)}...');
        await _registerTokenOnBackend(token);
      } else {
        print('[FCM] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FCM —Ç–æ–∫–µ–Ω');
      }

      return token;
    } catch (e) {
      print('[FCM] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: $e');
      return null;
    }
  }

  /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
  Future<void> _registerTokenOnBackend(String token) async {
    try {
      print('[FCM] üì§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ...');

      final apiService = ApiService();
      final platformName = kIsWeb ? 'web' : Platform.operatingSystem;
      final response = await apiService.registerFCMToken(token, platformName);

      if (response != null && response['success'] == true) {
        print('[FCM] ‚úÖ –¢–æ–∫–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ');
      } else {
        print('[FCM] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ');
      }
    } catch (e) {
      print('[FCM] ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  void _setupListeners() {
    print('[FCM] üëÇ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    _firebaseMessaging.onTokenRefresh.listen((newToken) {
      print('[FCM] üîÑ FCM —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
      _fcmToken = newToken;
      _registerTokenOnBackend(newToken);
    });

    // Foreground messages
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('[FCM] ========================================');
      print('[FCM] üì© Foreground —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      print('[FCM] Title: ${message.notification?.title}');
      print('[FCM] Body: ${message.notification?.body}');
      print('[FCM] Data: ${message.data}');
      print('[FCM] ========================================');

      _handleForegroundMessage(message);
    });

    // Background/terminated -> foreground (–∫–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é)
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('[FCM] ========================================');
      print('[FCM] üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é (background->foreground)');
      print('[FCM] Data: ${message.data}');
      print('[FCM] ========================================');

      _handleNotificationClick(message.data);
    });

    // –ù–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ (Android)
    platform.setMethodCallHandler((call) async {
      if (call.method == 'onNotificationClick') {
        final data = Map<String, dynamic>.from(call.arguments);
        print('[FCM] üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é (–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ)');
        print('[FCM] üì¶ –î–∞–Ω–Ω—ã–µ: $data');
        _handleNotificationClick(data);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    _checkInitialMessage();

    print('[FCM] ‚úÖ –í—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> _checkInitialMessage() async {
    try {
      final initialMessage = await _firebaseMessaging.getInitialMessage();

      if (initialMessage != null) {
        print('[FCM] ========================================');
        print('[FCM] üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (terminated)');
        print('[FCM] Data: ${initialMessage.data}');
        print('[FCM] ========================================');

        _handleNotificationClick(initialMessage.data);
      }
    } catch (e) {
      print('[FCM] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ foreground —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  void _handleForegroundMessage(RemoteMessage message) {
    final type = message.data['type'];

    switch (type) {
      case 'call':
        print('[FCM] üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ (foreground)');
        _showFullScreenCallNotification(message.data);
        break;

      case 'new_message':
        print('[FCM] üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (foreground)');
        _showMessageNotification(message.data);
        break;

      default:
        print('[FCM] üì¶ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: $type');
    }
  }

  /// –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ
  Future<void> _showFullScreenCallNotification(
      Map<String, dynamic> data) async {
    if (_localNotifications == null) {
      print('[FCM] ‚ö†Ô∏è LocalNotifications –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    print('[FCM] ========================================');
    print('[FCM] üì± –ü–û–ö–ê–ó–´–í–ê–ï–ú FULL-SCREEN –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ó–í–û–ù–ö–ï');
    print('[FCM] ========================================');

    try {
      final callId = data['call_id'] ?? data['callId'] ?? 'unknown';
      final callerName = data['caller_name'] ?? data['callerName'] ?? 'Unknown';
      final callType = data['call_type'] ?? data['callType'] ?? 'video';

      print('[FCM] Call ID: $callId');
      print('[FCM] Caller: $callerName');
      print('[FCM] Type: $callType');

      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      final androidDetails = AndroidNotificationDetails(
        'calls_channel',
        'Incoming Calls',
        channelDescription: 'Notifications for incoming calls',
        importance: Importance.max,
        priority: Priority.high,
        ticker: 'Incoming Call',
        playSound: true,
        enableVibration: true,
        vibrationPattern: Int64List.fromList([0, 1000, 500, 1000]),
        fullScreenIntent: true,
        category: AndroidNotificationCategory.call,
        visibility: NotificationVisibility.public,
        ongoing: true,
        autoCancel: false,
        styleInformation: const BigTextStyleInformation(
          'Tap to answer the call',
          contentTitle: 'üìû Incoming Call',
        ),
        actions: const <AndroidNotificationAction>[
          AndroidNotificationAction(
            'decline',
            '‚ùå Decline',
            showsUserInterface: false,
            cancelNotification: true,
          ),
          AndroidNotificationAction(
            'accept',
            '‚úÖ Accept',
            showsUserInterface: true,
            cancelNotification: true,
          ),
        ],
      );

      final notificationDetails = NotificationDetails(android: androidDetails);

      await _localNotifications!.show(
        callId.hashCode,
        'üìû Incoming Call',
        'From: $callerName',
        notificationDetails,
        payload: 'call:$callId:$callerName',
      );

      print('[FCM] ‚úÖ Full-screen notification –ø–æ–∫–∞–∑–∞–Ω');
      print('[FCM] ========================================');
    } catch (e) {
      print('[FCM] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–µ: $e');
    }
  }

  /// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
  Future<void> _showMessageNotification(Map<String, dynamic> data) async {
    if (_localNotifications == null) return;

    try {
      final chatId = data['chatId'] ?? data['chat_id'] ?? 'unknown';
      final senderName = data['sender_name'] ?? data['senderName'] ?? 'Unknown';
      final messageText = data['message'] ?? 'New message';

      const androidDetails = AndroidNotificationDetails(
        'messages_channel',
        'Messages',
        channelDescription: 'Notifications for new messages',
        importance: Importance.high,
        priority: Priority.high,
        playSound: true,
        enableVibration: true,
      );

      const notificationDetails = NotificationDetails(android: androidDetails);

      await _localNotifications!.show(
        chatId.hashCode,
        'üí¨ $senderName',
        messageText,
        notificationDetails,
        payload: 'message:$chatId',
      );
    } catch (e) {
      print('[FCM] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
  void _handleNotificationClick(Map<String, dynamic> data) {
    final type = data['type'];

    switch (type) {
      case 'new_message':
        final chatId = data['chatId'];
        print('[FCM] üí¨ –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç: $chatId');
        // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —á–∞—Ç—É
        break;

      case 'call':
      case 'incoming_call':
        final callId = data['callId'] ?? data['call_id'];
        final action = data['action'];
        print('[FCM] üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞: $callId, –¥–µ–π—Å—Ç–≤–∏–µ: $action');

        if (action == 'accept') {
          print('[FCM] ‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞');
          // TODO: –ü—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫
        } else if (action == 'decline') {
          print('[FCM] ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞');
          // TODO: –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫
        }
        break;

      default:
        print('[FCM] ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: $type');
    }
  }

  /// –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–µ
  Future<void> cancelCallNotification(String callId) async {
    if (_localNotifications != null) {
      try {
        await _localNotifications!.cancel(callId.hashCode);
        print('[FCM] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: $callId');
      } catch (e) {
        print('[FCM] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
      }
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
  Future<String?> getToken() async {
    if (_fcmToken != null) {
      return _fcmToken;
    }
    return await _getToken();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
  Future<void> refreshToken() async {
    final token = await getToken();
    if (token != null) {
      await _registerTokenOnBackend(token);
    }
  }
}
