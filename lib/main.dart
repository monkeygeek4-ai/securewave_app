// lib/main.dart

import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:provider/provider.dart';
import 'dart:async';
import 'providers/auth_provider.dart';
import 'providers/theme_provider.dart';
import 'providers/chat_provider.dart';
import 'screens/auth/login_screen.dart';
import 'screens/auth/register_screen.dart';
import 'screens/auth/invite_register_screen.dart';
import 'screens/home_screen.dart';
import 'services/webrtc_service.dart';
import 'models/call.dart';
import 'widgets/incoming_call_overlay.dart';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ –≤ URL (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ–±)
String? _checkInviteLink() {
  if (kIsWeb) {
    try {
      final html = Uri.base;
      print('[Init] –¢–µ–∫—É—â–∏–π URL: ${html.toString()}');
      print('[Init] –ü—É—Ç—å: ${html.path}');
      print('[Init] –°–µ–≥–º–µ–Ω—Ç—ã –ø—É—Ç–∏: ${html.pathSegments}');

      if (html.pathSegments.isNotEmpty && html.pathSegments.length >= 2) {
        if (html.pathSegments[0] == 'invite') {
          final inviteCode = html.pathSegments[1];
          print('[Init] ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–≤–∞–π—Ç-–∫–æ–¥: $inviteCode');
          return inviteCode;
        }
      }
    } catch (e) {
      print('[Init] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL: $e');
    }
  }
  return null;
}

void main() {
  print('[Main] ========================================');
  print('[Main] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è SecureWave');
  print('[Main] –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${kIsWeb ? "Web" : "Mobile"}');
  print('[Main] ========================================');

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => AuthProvider()),
        ChangeNotifierProxyProvider<AuthProvider, ChatProvider>(
          create: (_) => ChatProvider(),
          update: (_, auth, previous) {
            final chatProvider = previous ?? ChatProvider();
            if (auth.isAuthenticated && auth.currentUser != null) {
              chatProvider.setCurrentUserId(auth.currentUser!.id.toString());
            }
            return chatProvider;
          },
        ),
      ],
      child: MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Consumer2<ThemeProvider, AuthProvider>(
      builder: (context, themeProvider, authProvider, _) {
        return MaterialApp(
          title: 'SecureWave',
          debugShowCheckedModeBanner: false,
          theme: ThemeData(
            primarySwatch: Colors.blue,
            useMaterial3: true,
          ),
          darkTheme: ThemeData.dark().copyWith(
            primaryColor: Color(0xFF2B5CE6),
            useMaterial3: true,
          ),
          themeMode: themeProvider.themeMode,
          // –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º home, –∏–≥–Ω–æ—Ä–∏—Ä—É—è URL
          home: CallOverlayWrapper(
            child: InitializationWrapper(),
          ),
          // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
          routes: {
            '/login': (context) => LoginScreen(),
            '/register': (context) => RegisterScreen(),
            '/home': (context) => HomeScreen(),
          },
        );
      },
    );
  }
}

// –í–∏–¥–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class InitializationWrapper extends StatefulWidget {
  @override
  _InitializationWrapperState createState() => _InitializationWrapperState();
}

class _InitializationWrapperState extends State<InitializationWrapper> {
  bool _isInitializing = true;
  bool _isAuthenticated = false;
  String? _inviteCode;

  @override
  void initState() {
    super.initState();
    _initialize();
  }

  Future<void> _initialize() async {
    print('[Init] ========================================');
    print('[Init] –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    print('[Init] ========================================');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è /invite/XXX)
      _inviteCode = _checkInviteLink();

      if (_inviteCode != null) {
        print('[Init] üé´ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–≤–∞–π—Ç-–∫–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
        setState(() {
          _isInitializing = false;
          _isAuthenticated = false;
        });
        return;
      }

      // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –í–°–ï–ì–î–ê, –∏–≥–Ω–æ—Ä–∏—Ä—É—è URL
      final authProvider = context.read<AuthProvider>();

      print('[Init] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      await authProvider.checkAuth();

      if (!mounted) return;

      if (authProvider.isAuthenticated && authProvider.currentUser != null) {
        print('[Init] ========================================');
        print('[Init] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        print('[Init] üë§ Username: ${authProvider.currentUser!.username}');
        print('[Init] üÜî User ID: ${authProvider.currentUser!.id}');
        print('[Init] ========================================');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebRTC
        print('[Init] üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC...');
        try {
          await WebRTCService.instance.initialize(
            authProvider.currentUser!.id.toString(),
          );
          print('[Init] ‚úÖ WebRTC —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (e) {
          print('[Init] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebRTC: $e');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã
        final chatProvider = context.read<ChatProvider>();
        print('[Init] üì® –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã...');
        chatProvider.setCurrentUserId(authProvider.currentUser!.id.toString());

        try {
          await chatProvider.loadChats();
          print('[Init] ‚úÖ –ß–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${chatProvider.chats.length} —à—Ç.)');
        } catch (e) {
          print('[Init] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: $e');
        }

        setState(() {
          _isAuthenticated = true;
          _isInitializing = false;
        });
      } else {
        print('[Init] ========================================');
        print('[Init] ‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        print('[Init] ========================================');

        setState(() {
          _isAuthenticated = false;
          _isInitializing = false;
        });
      }
    } catch (e, stackTrace) {
      print('[Init] ========================================');
      print('[Init] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      print('[Init] –û—à–∏–±–∫–∞: $e');
      print('[Init] Stack trace: $stackTrace');
      print('[Init] ========================================');

      setState(() {
        _isAuthenticated = false;
        _isInitializing = false;
      });
    }

    print('[Init] ========================================');
    print('[Init] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    print('[Init] –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $_isAuthenticated');
    print('[Init] ========================================');
  }

  @override
  Widget build(BuildContext context) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (_isInitializing) {
      return Scaffold(
        body: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [Color(0xFF667EEA), Color(0xFF764BA2)],
            ),
          ),
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  'üîê',
                  style: TextStyle(fontSize: 80),
                ),
                SizedBox(height: 20),
                Text(
                  'SecureWave',
                  style: TextStyle(
                    fontSize: 32,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                SizedBox(height: 40),
                CircularProgressIndicator(
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
                SizedBox(height: 20),
                Text(
                  '–ó–∞–≥—Ä—É–∑–∫–∞...',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.white70,
                  ),
                ),
              ],
            ),
          ),
        ),
      );
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥
    if (_inviteCode != null) {
      return InviteRegisterScreen(inviteCode: _inviteCode!);
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HomeScreen –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏–Ω–∞—á–µ LoginScreen
    return _isAuthenticated ? HomeScreen() : LoginScreen();
  }
}

// –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class CallOverlayWrapper extends StatefulWidget {
  final Widget child;

  const CallOverlayWrapper({Key? key, required this.child}) : super(key: key);

  @override
  _CallOverlayWrapperState createState() => _CallOverlayWrapperState();
}

class _CallOverlayWrapperState extends State<CallOverlayWrapper> {
  Call? _incomingCall;
  StreamSubscription<Call?>? _callSubscription;

  @override
  void initState() {
    super.initState();

    print('[CallOverlay] ========================================');
    print('[CallOverlay] initState - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è overlay');
    print('[CallOverlay] –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${kIsWeb ? "Web" : "Mobile"}');
    print('[CallOverlay] ========================================');

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ –ù–ï–ú–ï–î–õ–ï–ù–ù–û
    _subscribeToCallState();
  }

  void _subscribeToCallState() {
    print('[CallOverlay] üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ callState stream...');

    _callSubscription?.cancel();
    _callSubscription = WebRTCService.instance.callState.listen(
      (call) {
        print('[CallOverlay] ========================================');
        print('[CallOverlay] üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞');
        print('[CallOverlay] Call: ${call != null ? "EXISTS" : "NULL"}');

        if (call != null) {
          print('[CallOverlay]   - ID: ${call.id}');
          print('[CallOverlay]   - Status: ${call.status}');
          print('[CallOverlay]   - Caller: ${call.callerName}');
          print('[CallOverlay]   - Type: ${call.callType}');
        }
        print('[CallOverlay] ========================================');

        if (!mounted) {
          print('[CallOverlay] ‚ö†Ô∏è Widget –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
          return;
        }

        if (call != null && call.status == CallStatus.incoming) {
          print(
              '[CallOverlay] ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç ${call.callerName}');
          setState(() {
            _incomingCall = call;
          });
        } else if (call == null ||
            call.status == CallStatus.ended ||
            call.status == CallStatus.declined) {
          print('[CallOverlay] üî¥ –°–∫—Ä—ã–≤–∞–µ–º overlay (—Å—Ç–∞—Ç—É—Å: ${call?.status})');
          setState(() {
            _incomingCall = null;
          });
        }
      },
      onError: (error) {
        print('[CallOverlay] ‚ùå –û—à–∏–±–∫–∞ –≤ callState stream: $error');
      },
      cancelOnError: false,
    );

    print('[CallOverlay] ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ callState –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
  }

  @override
  void dispose() {
    print('[CallOverlay] ========================================');
    print('[CallOverlay] dispose - –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É');
    print('[CallOverlay] ========================================');
    _callSubscription?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        widget.child,

        // Overlay –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        if (_incomingCall != null)
          Positioned.fill(
            child: Container(
              color: Colors.black.withOpacity(0.8),
              child: IncomingCallOverlay(
                incomingCall: _incomingCall!,
                onDismiss: () {
                  print(
                      '[CallOverlay] ========================================');
                  print('[CallOverlay] onDismiss –≤—ã–∑–≤–∞–Ω –≤—Ä—É—á–Ω—É—é');
                  print(
                      '[CallOverlay] ========================================');
                  setState(() {
                    _incomingCall = null;
                  });
                },
              ),
            ),
          ),
      ],
    );
  }
}
