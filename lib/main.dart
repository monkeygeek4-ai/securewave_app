// lib/main.dart
// –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø —Å background handler –¥–ª—è FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π + CallActivity

import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart'; // –î–ª—è MethodChannel
import 'package:provider/provider.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'dart:async';
import 'dart:io' show Platform;
import 'firebase_options.dart';
import 'providers/auth_provider.dart';
import 'providers/theme_provider.dart';
import 'providers/chat_provider.dart';
import 'screens/auth/login_screen.dart';
import 'screens/auth/register_screen.dart';
import 'screens/auth/invite_register_screen.dart';
import 'screens/home_screen.dart';
import 'screens/call_screen.dart';
import 'services/webrtc_service.dart';
import 'services/fcm_service.dart';
import 'services/api_service.dart';
import 'models/call.dart';
import 'widgets/incoming_call_overlay.dart';

// ‚≠ê‚≠ê‚≠ê BACKGROUND MESSAGE HANDLER –¥–ª—è FCM
// –í–ê–ñ–ù–û: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å TOP-LEVEL —Ñ—É–Ω–∫—Ü–∏–µ–π (–≤–Ω–µ –∫–ª–∞—Å—Å–æ–≤)
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  print('[FCM Background] ========================================');
  print('[FCM Background] üì© –ü–æ–ª—É—á–µ–Ω–æ background —Å–æ–æ–±—â–µ–Ω–∏–µ');
  print('[FCM Background] Message ID: ${message.messageId}');
  print('[FCM Background] Data: ${message.data}');
  print('[FCM Background] ========================================');

  final data = message.data;
  final type = data['type'];

  if (type == 'incoming_call') {
    print('[FCM Background] üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –≤ background!');

    final callId = data['callId'] ?? 'unknown';
    final callerName = data['callerName'] ?? 'Unknown';
    final callType = data['callType'] ?? 'audio';

    print('[FCM Background] Caller: $callerName');
    print('[FCM Background] CallType: $callType');
    print('[FCM Background] –ó–∞–ø—É—Å–∫ CallActivity...');

    // ‚≠ê –í–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –∑–∞–ø—É—Å–∫–∞–µ–º CallActivity —á–µ—Ä–µ–∑ MethodChannel
    try {
      const platform = MethodChannel('com.securewave.app/call');
      await platform.invokeMethod('showCallScreen', {
        'callId': callId,
        'callerName': callerName,
        'callType': callType,
      });
      print('[FCM Background] ‚úÖ CallActivity –∑–∞–ø—É—â–µ–Ω–∞');
    } catch (e) {
      print('[FCM Background] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ CallActivity: $e');
      print('[FCM Background] Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');

      // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      final FlutterLocalNotificationsPlugin localNotifications =
          FlutterLocalNotificationsPlugin();

      const AndroidInitializationSettings initializationSettingsAndroid =
          AndroidInitializationSettings('@mipmap/ic_launcher');

      const InitializationSettings initializationSettings =
          InitializationSettings(android: initializationSettingsAndroid);

      await localNotifications.initialize(initializationSettings);

      const AndroidNotificationChannel channel = AndroidNotificationChannel(
        'calls_channel',
        'Incoming Calls',
        description: 'Notifications for incoming calls',
        importance: Importance.max,
        playSound: true,
        enableVibration: true,
      );

      await localNotifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(channel);

      final AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
        'calls_channel',
        'Incoming Calls',
        channelDescription: 'Notifications for incoming calls',
        importance: Importance.max,
        priority: Priority.high,
        playSound: true,
        enableVibration: true,
        vibrationPattern: Int64List.fromList([0, 1000, 500, 1000]),
        fullScreenIntent: true,
        category: AndroidNotificationCategory.call,
        ongoing: true,
        autoCancel: false,
        actions: <AndroidNotificationAction>[
          AndroidNotificationAction(
            'decline',
            '‚ùå Decline',
            showsUserInterface: false,
            cancelNotification: true,
          ),
          AndroidNotificationAction(
            'accept',
            '‚úÖ Accept',
            showsUserInterface: true,
            cancelNotification: true,
          ),
        ],
      );

      final NotificationDetails notificationDetails =
          NotificationDetails(android: androidDetails);

      await localNotifications.show(
        callId.hashCode,
        'üìû Incoming Call',
        'From: $callerName',
        notificationDetails,
        payload: 'call:$callId:$callerName',
      );

      print('[FCM Background] ‚úÖ Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ');
    }
  }

  print('[FCM Background] ========================================');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ –≤ URL (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ–±)
String? _checkInviteLink() {
  if (kIsWeb) {
    try {
      final html = Uri.base;
      print('[Init] –¢–µ–∫—É—â–∏–π URL: ${html.toString()}');
      print('[Init] –ü—É—Ç—å: ${html.path}');
      print('[Init] –°–µ–≥–º–µ–Ω—Ç—ã –ø—É—Ç–∏: ${html.pathSegments}');

      if (html.pathSegments.isNotEmpty && html.pathSegments.length >= 2) {
        if (html.pathSegments[0] == 'invite') {
          final inviteCode = html.pathSegments[1];
          print('[Init] ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–≤–∞–π—Ç-–∫–æ–¥: $inviteCode');
          return inviteCode;
        }
      }
    } catch (e) {
      print('[Init] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL: $e');
    }
  }
  return null;
}

void main() async {
  print('[Main] ========================================');
  print('[Main] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è SecureWave');
  print('[Main] –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${kIsWeb ? "Web" : "Mobile"}');
  print('[Main] ========================================');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flutter bindings
  WidgetsFlutterBinding.ensureInitialized();

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
    print('[Main] üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase...');

    if (kIsWeb) {
      // –î–ª—è Web –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
      print('[Main] üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase –¥–ª—è Web...');
      await Firebase.initializeApp(
        options: FirebaseOptions(
          apiKey: 'AIzaSyAW5HurHMo1l9ub2XKyr2nk-yP22bc_6F4',
          authDomain: 'wave-messenger-56985.firebaseapp.com',
          projectId: 'wave-messenger-56985',
          storageBucket: 'wave-messenger-56985.firebasestorage.app',
          messagingSenderId: '394959992893',
          appId: '1:394959992893:web:c7d493658ad06278661254',
        ),
      );
      print('[Main] ‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Web');
    } else {
      // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–µ–º firebase_options.dart
      print('[Main] üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase –¥–ª—è Mobile...');
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
      print('[Main] ‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Mobile');

      // ‚≠ê‚≠ê‚≠ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø BACKGROUND HANDLER
      FirebaseMessaging.onBackgroundMessage(
          _firebaseMessagingBackgroundHandler);
      print('[Main] ‚úÖ Background handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

      print('[Main] ‚ÑπÔ∏è FCM –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  } catch (e, stackTrace) {
    print('[Main] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: $e');
    print('[Main] Stack trace: $stackTrace');
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ Firebase
  }

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => AuthProvider()),
        ChangeNotifierProxyProvider<AuthProvider, ChatProvider>(
          create: (_) => ChatProvider(),
          update: (_, auth, previous) {
            final chatProvider = previous ?? ChatProvider();
            if (auth.isAuthenticated && auth.currentUser != null) {
              chatProvider.setCurrentUserId(auth.currentUser!.id.toString());
            }
            return chatProvider;
          },
        ),
      ],
      child: MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Consumer2<ThemeProvider, AuthProvider>(
      builder: (context, themeProvider, authProvider, _) {
        return MaterialApp(
          title: 'SecureWave',
          debugShowCheckedModeBanner: false,
          theme: ThemeData(
            primarySwatch: Colors.blue,
            useMaterial3: true,
          ),
          darkTheme: ThemeData.dark().copyWith(
            primaryColor: Color(0xFF2B5CE6),
            useMaterial3: true,
          ),
          themeMode: themeProvider.themeMode,
          home: CallOverlayWrapper(
            child: InitializationWrapper(),
          ),
          routes: {
            '/login': (context) => LoginScreen(),
            '/register': (context) => RegisterScreen(),
            '/home': (context) => HomeScreen(),
          },
        );
      },
    );
  }
}

// –í–∏–¥–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class InitializationWrapper extends StatefulWidget {
  const InitializationWrapper({Key? key}) : super(key: key);

  @override
  _InitializationWrapperState createState() => _InitializationWrapperState();
}

class _InitializationWrapperState extends State<InitializationWrapper> {
  bool _isInitializing = true;
  bool _isAuthenticated = false;
  String? _inviteCode;

  @override
  void initState() {
    super.initState();
    _initialize();
  }

  Future<void> _initialize() async {
    print('[Init] ========================================');
    print('[Init] –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    print('[Init] ========================================');

    try {
      _inviteCode = _checkInviteLink();

      if (_inviteCode != null) {
        print('[Init] üé´ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–≤–∞–π—Ç-–∫–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
        setState(() {
          _isInitializing = false;
          _isAuthenticated = false;
        });
        return;
      }

      final authProvider = context.read<AuthProvider>();

      print('[Init] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      await authProvider.checkAuth();

      if (!mounted) return;

      if (authProvider.isAuthenticated && authProvider.currentUser != null) {
        print('[Init] ========================================');
        print('[Init] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        print('[Init] üë§ Username: ${authProvider.currentUser!.username}');
        print('[Init] üÜî User ID: ${authProvider.currentUser!.id}');
        print('[Init] ========================================');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FCM –¥–ª—è mobile
        if (!kIsWeb) {
          print('[Init] ========================================');
          print('[Init] üì± –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FCM (–ü–û–°–õ–ï FIREBASE –ò AUTH)');
          print('[Init] ========================================');

          try {
            // –î–∞–µ–º Firebase –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            await Future.delayed(Duration(milliseconds: 500));

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FCM
            print('[Init] üî• –í—ã–∑–æ–≤ FCMService().initialize()...');
            await FCMService().initialize();
            print('[Init] ‚úÖ‚úÖ‚úÖ FCM –£–°–ü–ï–®–ù–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù!');

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            print('[Init] üîë –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞...');
            final fcmToken = await FCMService().getToken();

            print('[Init] ========================================');
            if (fcmToken != null && fcmToken.isNotEmpty) {
              print('[Init] ‚úÖ‚úÖ‚úÖ FCM –¢–û–ö–ï–ù –ü–û–õ–£–ß–ï–ù!');
              print(
                  '[Init] Token (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): ${fcmToken.substring(0, fcmToken.length > 50 ? 50 : fcmToken.length)}...');
              print('[Init] Token length: ${fcmToken.length}');

              // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
              print('[Init] üì§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ...');
              await FCMService().refreshToken();
              print('[Init] ‚úÖ‚úÖ‚úÖ –¢–û–ö–ï–ù –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù –ù–ê –ë–≠–ö–ï–ù–î–ï!');
            } else {
              print('[Init] ‚ùå‚ùå‚ùå FCM –¢–û–ö–ï–ù –ù–ï –ü–û–õ–£–ß–ï–ù!');
              print('[Init] Token value: $fcmToken');
            }
            print('[Init] ========================================');
          } catch (e, stackTrace) {
            print('[Init] ========================================');
            print('[Init] ‚ùå‚ùå‚ùå –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò FCM');
            print('[Init] –û—à–∏–±–∫–∞: $e');
            print('[Init] Stack trace: $stackTrace');
            print('[Init] ========================================');
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ FCM –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
          }
        }

        print('[Init] üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC...');
        try {
          await WebRTCService.instance.initialize(
            authProvider.currentUser!.id.toString(),
          );
          print('[Init] ‚úÖ WebRTC —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

          if (mounted) {
            print('[Init] üì¢ –í—ã–∑—ã–≤–∞–µ–º _notifyWebRTCReady()');
            _notifyWebRTCReady();
          }
        } catch (e) {
          print('[Init] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebRTC: $e');
        }

        final chatProvider = context.read<ChatProvider>();
        print('[Init] üì® –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã...');
        chatProvider.setCurrentUserId(authProvider.currentUser!.id.toString());

        try {
          await chatProvider.loadChats();
          print('[Init] ‚úÖ –ß–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${chatProvider.chats.length} —à—Ç.)');
        } catch (e) {
          print('[Init] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: $e');
        }

        setState(() {
          _isAuthenticated = true;
          _isInitializing = false;
        });
      } else {
        print('[Init] ========================================');
        print('[Init] ‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        print('[Init] ========================================');

        setState(() {
          _isAuthenticated = false;
          _isInitializing = false;
        });
      }
    } catch (e, stackTrace) {
      print('[Init] ========================================');
      print('[Init] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      print('[Init] –û—à–∏–±–∫–∞: $e');
      print('[Init] Stack trace: $stackTrace');
      print('[Init] ========================================');

      setState(() {
        _isAuthenticated = false;
        _isInitializing = false;
      });
    }

    print('[Init] ========================================');
    print('[Init] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    print('[Init] –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $_isAuthenticated');
    print('[Init] ========================================');
  }

  void _notifyWebRTCReady() {
    final callOverlayState =
        context.findAncestorStateOfType<_CallOverlayWrapperState>();
    if (callOverlayState != null) {
      print('[Init] üì¢ –£–≤–µ–¥–æ–º–ª—è–µ–º CallOverlay –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ WebRTC');
      callOverlayState.onWebRTCReady();
    } else {
      print('[Init] ‚ö†Ô∏è CallOverlayWrapper –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–µ—Ä–µ–≤–µ –≤–∏–¥–∂–µ—Ç–æ–≤');
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isInitializing) {
      return Scaffold(
        body: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [Color(0xFF667EEA), Color(0xFF764BA2)],
            ),
          ),
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  'üîê',
                  style: TextStyle(fontSize: 80),
                ),
                SizedBox(height: 20),
                Text(
                  'SecureWave',
                  style: TextStyle(
                    fontSize: 32,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                SizedBox(height: 40),
                CircularProgressIndicator(
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
                SizedBox(height: 20),
                Text(
                  '–ó–∞–≥—Ä—É–∑–∫–∞...',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.white70,
                  ),
                ),
              ],
            ),
          ),
        ),
      );
    }

    if (_inviteCode != null) {
      return InviteRegisterScreen(inviteCode: _inviteCode!);
    }

    return _isAuthenticated ? HomeScreen() : LoginScreen();
  }
}

// –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class CallOverlayWrapper extends StatefulWidget {
  final Widget child;

  const CallOverlayWrapper({Key? key, required this.child}) : super(key: key);

  @override
  _CallOverlayWrapperState createState() => _CallOverlayWrapperState();

  static _CallOverlayWrapperState? of(BuildContext context) {
    return context.findAncestorStateOfType<_CallOverlayWrapperState>();
  }
}

class _CallOverlayWrapperState extends State<CallOverlayWrapper> {
  Call? _incomingCall;
  StreamSubscription<Call?>? _callSubscription;
  bool _isWebRTCReady = false;
  OverlayEntry? _overlayEntry;

  @override
  void initState() {
    super.initState();

    print('[CallOverlay] ========================================');
    print('[CallOverlay] initState - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è overlay');
    print('[CallOverlay] –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${kIsWeb ? "Web" : "Mobile"}');
    print('[CallOverlay] ========================================');

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ FCM callback –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    if (!kIsWeb) {
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FCM
      Future.delayed(Duration(seconds: 2), () {
        if (mounted) {
          _setupFCMCallback();
        }
      });
    }

    print('[CallOverlay] ‚è≥ –û–∂–∏–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebRTC...');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FCM callback
  void _setupFCMCallback() {
    print('[CallOverlay] ========================================');
    print('[CallOverlay] üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FCM callback –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤');
    print('[CallOverlay] ========================================');

    try {
      final fcmService = FCMService();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
      fcmService.onIncomingCall = (data) {
        print('[CallOverlay] ========================================');
        print('[CallOverlay] üîî FCM CALLBACK: –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫!');
        print('[CallOverlay] –î–∞–Ω–Ω—ã–µ: $data');
        print('[CallOverlay] ========================================');

        if (!mounted) {
          print('[CallOverlay] ‚ö†Ô∏è Widget –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
          return;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        final callId = data['callId'];
        final chatId = data['chatId'] ?? 'unknown';
        final callerName = data['callerName'] ?? 'Unknown';
        final callType = data['callType'] ?? 'video';
        final callerAvatar = data['callerAvatar'];

        if (callId == null) {
          print('[CallOverlay] ‚ùå callId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö');
          return;
        }

        print('[CallOverlay] üìû –°–æ–∑–¥–∞–µ–º Call –æ–±—ä–µ–∫—Ç:');
        print('[CallOverlay]   - callId: $callId');
        print('[CallOverlay]   - chatId: $chatId');
        print('[CallOverlay]   - callerName: $callerName');
        print('[CallOverlay]   - callType: $callType');

        // –°–æ–∑–¥–∞–µ–º Call –æ–±—ä–µ–∫—Ç –∏–∑ FCM –¥–∞–Ω–Ω—ã—Ö
        final incomingCall = Call(
          id: callId,
          chatId: chatId,
          callerId: '',
          callerName: callerName,
          receiverId: '',
          receiverName: 'You',
          callType: callType,
          status: CallStatus.incoming,
          startTime: DateTime.now(),
        );

        print('[CallOverlay] ‚úÖ Call –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º overlay');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay
        _showIncomingCallOverlay(incomingCall);
      };

      print('[CallOverlay] ‚úÖ FCM callback —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (e) {
      print('[CallOverlay] ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FCM callback: $e');
    }
  }

  void onWebRTCReady() {
    print('[CallOverlay] ========================================');
    print('[CallOverlay] üéâ WebRTC –≥–æ—Ç–æ–≤! –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∑–≤–æ–Ω–∫–∏');
    print('[CallOverlay] ========================================');

    if (!mounted) {
      print('[CallOverlay] ‚ö†Ô∏è Widget –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É');
      return;
    }

    setState(() {
      _isWebRTCReady = true;
    });

    _subscribeToCallState();
  }

  void _subscribeToCallState() {
    print('[CallOverlay] üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ callState stream...');

    _callSubscription?.cancel();

    _callSubscription = WebRTCService.instance.callState.listen(
      (call) {
        print('[CallOverlay] ========================================');
        print('[CallOverlay] üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞');
        print('[CallOverlay] Call: ${call != null ? "EXISTS" : "NULL"}');

        if (call != null) {
          print('[CallOverlay]   - ID: ${call.id}');
          print('[CallOverlay]   - Status: ${call.status}');
          print('[CallOverlay]   - Caller: ${call.callerName}');
          print('[CallOverlay]   - Type: ${call.callType}');
        }
        print('[CallOverlay] ========================================');

        if (!mounted) return;

        if (call != null && call.status == CallStatus.incoming) {
          print(
              '[CallOverlay] ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç ${call.callerName}');
          _showIncomingCallOverlay(call);
        } else if (call == null ||
            call.status == CallStatus.ended ||
            call.status == CallStatus.declined) {
          print('[CallOverlay] üî¥ –°–∫—Ä—ã–≤–∞–µ–º overlay (—Å—Ç–∞—Ç—É—Å: ${call?.status})');
          _hideIncomingCallOverlay();
        }
      },
      onError: (error) {
        print('[CallOverlay] ‚ùå –û—à–∏–±–∫–∞ –≤ callState stream: $error');
      },
      cancelOnError: false,
    );

    print('[CallOverlay] ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ callState –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
  }

  void _showIncomingCallOverlay(Call call) {
    _overlayEntry?.remove();

    print('[CallOverlay] üé® –°–æ–∑–¥–∞–µ–º OverlayEntry');

    final overlayContext = context;

    _overlayEntry = OverlayEntry(
      builder: (context) => Material(
        color: Colors.transparent,
        child: Container(
          color: Colors.black.withOpacity(0.8),
          child: IncomingCallOverlay(
            incomingCall: call,
            onDismiss: () {
              print('[CallOverlay] onDismiss –≤—ã–∑–≤–∞–Ω');
              _hideIncomingCallOverlay();
            },
            onAccept: () async {
              print('[CallOverlay] ‚úÖ onAccept - –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫');

              try {
                await WebRTCService.instance.answerCall(call.id);
                print('[CallOverlay] ‚úÖ answerCall –≤—ã–∑–≤–∞–Ω');
              } catch (e) {
                print('[CallOverlay] ‚ùå –û—à–∏–±–∫–∞ answerCall: $e');
              }

              _hideIncomingCallOverlay();

              Navigator.of(overlayContext).push(
                MaterialPageRoute(
                  builder: (_) => CallScreen(initialCall: call),
                ),
              );

              print('[CallOverlay] ‚úÖ CallScreen –æ—Ç–∫—Ä—ã—Ç');
            },
          ),
        ),
      ),
    );

    Overlay.of(context).insert(_overlayEntry!);
    print('[CallOverlay] ‚úÖ OverlayEntry –≤—Å—Ç–∞–≤–ª–µ–Ω');
  }

  void _hideIncomingCallOverlay() {
    _overlayEntry?.remove();
    _overlayEntry = null;
  }

  @override
  void dispose() {
    print('[CallOverlay] dispose - –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É');

    if (!kIsWeb) {
      try {
        FCMService().onIncomingCall = null;
        print('[CallOverlay] ‚úÖ FCM callback –æ—á–∏—â–µ–Ω');
      } catch (e) {
        print('[CallOverlay] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ FCM callback: $e');
      }
    }

    _hideIncomingCallOverlay();
    _callSubscription?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return widget.child;
  }
}
