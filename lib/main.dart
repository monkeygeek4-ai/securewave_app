// lib/main.dart

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'dart:async';
import 'providers/auth_provider.dart';
import 'providers/theme_provider.dart';
import 'providers/chat_provider.dart';
import 'screens/auth/login_screen.dart';
import 'screens/auth/register_screen.dart';
import 'screens/home_screen.dart';
import 'services/webrtc_service.dart';
import 'services/api_service.dart';
import 'models/call.dart';
import 'widgets/incoming_call_overlay.dart';

void main() {
  print('[Main] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthProvider()),
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(
          create: (_) => ChatProvider(),
        ),
      ],
      child: MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Consumer<ThemeProvider>(
      builder: (context, themeProvider, _) {
        return MaterialApp(
          title: 'SecureWave',
          debugShowCheckedModeBanner: false,
          theme: ThemeData(
            primarySwatch: Colors.blue,
            useMaterial3: true,
          ),
          darkTheme: ThemeData.dark().copyWith(
            primaryColor: Color(0xFF2B5CE6),
            useMaterial3: true,
          ),
          themeMode: themeProvider.themeMode,
          // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ CallOverlayWrapper
          home: CallOverlayWrapper(
            child: InitializationWrapper(),
          ),
          routes: {
            '/login': (context) => LoginScreen(),
            '/register': (context) => RegisterScreen(),
            '/home': (context) => HomeScreen(),
          },
        );
      },
    );
  }
}

// –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
class CallOverlayWrapper extends StatefulWidget {
  final Widget child;

  const CallOverlayWrapper({Key? key, required this.child}) : super(key: key);

  @override
  _CallOverlayWrapperState createState() => _CallOverlayWrapperState();
}

class _CallOverlayWrapperState extends State<CallOverlayWrapper> {
  Call? _incomingCall;
  StreamSubscription<Call?>? _callSubscription;

  @override
  void initState() {
    super.initState();

    print('[CallOverlay] initState - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ callState');

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –û–î–ò–ù –†–ê–ó –≤ initState
    _callSubscription = WebRTCService.instance.callState.listen((call) {
      print('[CallOverlay] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞: ${call?.status}');

      if (!mounted) return;

      if (call != null && call.status == CallStatus.incoming) {
        print(
            '[CallOverlay] üìû –ü–û–ö–ê–ó–´–í–ê–ï–ú –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç ${call.callerName}');
        setState(() {
          _incomingCall = call;
        });
      } else if (call == null ||
          call.status == CallStatus.ended ||
          call.status == CallStatus.declined) {
        print('[CallOverlay] –°–∫—Ä—ã–≤–∞–µ–º overlay (—Å—Ç–∞—Ç—É—Å: ${call?.status})');
        setState(() {
          _incomingCall = null;
        });
      }
    });
  }

  @override
  void dispose() {
    print('[CallOverlay] dispose - –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É');
    _callSubscription?.cancel();
    // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º WebRTCService.instance.dispose()!
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        widget.child,

        // Overlay –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (_incomingCall != null)
          Positioned.fill(
            child: Container(
              color: Colors.black.withOpacity(0.3), // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
              child: IncomingCallOverlay(
                incomingCall: _incomingCall!,
                onDismiss: () {
                  print('[CallOverlay] onDismiss –≤—ã–∑–≤–∞–Ω');
                  setState(() {
                    _incomingCall = null;
                  });
                },
              ),
            ),
          ),
      ],
    );
  }
}

// –í–∏–¥–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
class InitializationWrapper extends StatefulWidget {
  @override
  _InitializationWrapperState createState() => _InitializationWrapperState();
}

class _InitializationWrapperState extends State<InitializationWrapper> {
  bool _isInitialized = false;

  @override
  void initState() {
    super.initState();
    _initialize();
  }

  Future<void> _initialize() async {
    final authProvider = context.read<AuthProvider>();
    final apiService = ApiService.instance;

    print('[Init] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞
    final hasToken = await apiService.waitForToken();

    if (hasToken) {
      print('[Init] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        final user = await apiService.getCurrentUser();

        if (user != null && user.id.isNotEmpty) {
          print('[Init] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${user.username}');

          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebRTC
          print('[Init] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}');

          try {
            await WebRTCService.instance.initialize(user.id);
            print('[Init] ‚úÖ WebRTC —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          } catch (e) {
            print('[Init] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebRTC: $e');
          }

          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChatProvider
          final chatProvider = context.read<ChatProvider>();
          try {
            // –ï—Å–ª–∏ —É ChatProvider –µ—Å—Ç—å –º–µ—Ç–æ–¥ initialize, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
            // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            print('[Init] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChatProvider');
            // await chatProvider.initialize(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          } catch (e) {
            print('[Init] ChatProvider initialize –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –æ—à–∏–±–∫–∞: $e');
          }
        }
      } catch (e) {
        print('[Init] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      }
    } else {
      print('[Init] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    setState(() {
      _isInitialized = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (!_isInitialized) {
      return Scaffold(
        body: Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

    return Consumer<AuthProvider>(
      builder: (context, authProvider, _) {
        if (authProvider.isLoading) {
          return Scaffold(
            body: Center(
              child: CircularProgressIndicator(),
            ),
          );
        }

        if (authProvider.isAuthenticated) {
          return HomeScreen();
        }

        return LoginScreen();
      },
    );
  }
}
