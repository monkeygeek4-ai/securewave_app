// lib/providers/auth_provider.dart

import 'package:flutter/material.dart';
import '../services/api_service.dart';
import '../services/websocket_manager.dart';
import '../models/user.dart';

class AuthProvider extends ChangeNotifier {
  final ApiService _api = ApiService.instance;
  final WebSocketManager _wsManager = WebSocketManager.instance;

  User? _currentUser;
  bool _isAuthenticated = false;
  bool _isLoading = true;
  String? _errorMessage;

  User? get currentUser => _currentUser;
  bool get isAuthenticated => _isAuthenticated;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;
  String? get currentToken => _api.currentToken;

  // –£–ë–†–ê–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
  // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —è–≤–Ω–æ –∏–∑ InitializationWrapper
  AuthProvider() {
    print('[AuthProvider] –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä AuthProvider');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
  Future<void> checkAuth() async {
    print('[AuthProvider] ========================================');
    print('[AuthProvider] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    print('[AuthProvider] ========================================');

    _isLoading = true;
    notifyListeners();

    try {
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      await _api.waitForToken();

      if (_api.hasToken) {
        print('[AuthProvider] ‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω');
        print('[AuthProvider] üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        final user = await _api.getCurrentUser();

        if (user != null) {
          _currentUser = user;
          _isAuthenticated = true;

          print('[AuthProvider] ========================================');
          print('[AuthProvider] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          print('[AuthProvider]    Username: ${user.username}');
          print('[AuthProvider]    User ID: ${user.id}');
          print('[AuthProvider]    Email: ${user.email}');
          print('[AuthProvider] ========================================');

          // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket
          try {
            print('[AuthProvider] üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket...');
            await _wsManager.connect(token: _api.currentToken!);
            print('[AuthProvider] ‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
          } catch (e) {
            print('[AuthProvider] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: $e');
          }
        } else {
          print('[AuthProvider] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          _isAuthenticated = false;
          await _api.clearToken();
        }
      } else {
        print('[AuthProvider] ‚ÑπÔ∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        _isAuthenticated = false;
      }
    } catch (e) {
      print('[AuthProvider] ========================================');
      print('[AuthProvider] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e');
      print('[AuthProvider] ========================================');
      _isAuthenticated = false;
      await _api.clearToken();
    } finally {
      _isLoading = false;
      notifyListeners();

      print('[AuthProvider] ========================================');
      print('[AuthProvider] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      print(
          '[AuthProvider] –°—Ç–∞—Ç—É—Å: ${_isAuthenticated ? "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" : "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}');
      print('[AuthProvider] ========================================');
    }
  }

  // –£–°–¢–ê–†–ï–õ–û: –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ checkAuth() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ')
  Future<void> checkAuthStatus() async {
    return checkAuth();
  }

  Future<bool> login(String username, String password) async {
    print('[AuthProvider] ========================================');
    print('[AuthProvider] üîê –í—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $username');
    print('[AuthProvider] ========================================');

    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      await _api.clearToken();
      _wsManager.disconnect();

      final response = await _api.login(username, password);
      print('[AuthProvider] –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –≤—Ö–æ–¥–∞: $response');

      if (response['success'] == true || response['user'] != null) {
        _currentUser = User.fromJson(response['user']);
        _isAuthenticated = true;

        print('[AuthProvider] ‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        print('[AuthProvider]    Username: ${_currentUser!.username}');
        print('[AuthProvider]    User ID: ${_currentUser!.id}');

        String? token = response['token'] ??
            response['access_token'] ??
            response['accessToken'];

        if (token != null && token.isNotEmpty) {
          print('[AuthProvider] üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞');
          await Future.delayed(Duration(milliseconds: 500));

          try {
            await _wsManager.connect(token: token);
            print('[AuthProvider] ‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
          } catch (e) {
            print('[AuthProvider] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: $e');
          }
        }

        _isLoading = false;
        notifyListeners();

        print('[AuthProvider] ========================================');
        return true;
      } else {
        _errorMessage = response['error'] ?? '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ';
        _isAuthenticated = false;
        _isLoading = false;
        notifyListeners();

        print('[AuthProvider] ‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $_errorMessage');
        print('[AuthProvider] ========================================');
        return false;
      }
    } catch (e) {
      _errorMessage = e.toString();
      _isAuthenticated = false;
      _isLoading = false;
      notifyListeners();

      print('[AuthProvider] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $e');
      print('[AuthProvider] ========================================');
      return false;
    }
  }

  Future<bool> register(
    String username,
    String password,
    String email,
    String fullName,
  ) async {
    print('[AuthProvider] ========================================');
    print('[AuthProvider] üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $username');
    print('[AuthProvider] ========================================');

    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      await _api.clearToken();
      _wsManager.disconnect();

      final response = await _api.register(
        username: username,
        password: password,
        email: email,
        fullName: fullName,
      );

      print('[AuthProvider] –û—Ç–≤–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $response');

      if (response['success'] == true || response['user'] != null) {
        _currentUser = User.fromJson(response['user']);
        _isAuthenticated = true;

        print('[AuthProvider] ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        print('[AuthProvider]    Username: ${_currentUser!.username}');
        print('[AuthProvider]    User ID: ${_currentUser!.id}');

        String? token = response['token'] ??
            response['access_token'] ??
            response['accessToken'];

        if (token != null && token.isNotEmpty) {
          print('[AuthProvider] üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
          await Future.delayed(Duration(milliseconds: 500));

          try {
            await _wsManager.connect(token: token);
            print('[AuthProvider] ‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
          } catch (e) {
            print('[AuthProvider] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: $e');
          }
        }

        _isLoading = false;
        notifyListeners();

        print('[AuthProvider] ========================================');
        return true;
      } else {
        _errorMessage = response['error'] ?? '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
        _isAuthenticated = false;
        _isLoading = false;
        notifyListeners();

        print('[AuthProvider] ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $_errorMessage');
        print('[AuthProvider] ========================================');
        return false;
      }
    } catch (e) {
      _errorMessage = e.toString();
      _isAuthenticated = false;
      _isLoading = false;
      notifyListeners();

      print('[AuthProvider] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e');
      print('[AuthProvider] ========================================');
      return false;
    }
  }

  void setAuthenticated(Map<String, dynamic> userData, String? token) {
    print('[AuthProvider] ========================================');
    print('[AuthProvider] setAuthenticated –≤—ã–∑–≤–∞–Ω');
    print('[AuthProvider] ========================================');

    _currentUser = User.fromJson(userData);
    _isAuthenticated = true;

    if (token != null && token.isNotEmpty) {
      Future.delayed(Duration(milliseconds: 500), () async {
        try {
          await _wsManager.connect(token: token);
          print('[AuthProvider] ‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } catch (e) {
          print('[AuthProvider] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: $e');
        }
      });
    }

    notifyListeners();
  }

  Future<void> logout() async {
    print('[AuthProvider] ========================================');
    print('[AuthProvider] üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    print('[AuthProvider] ========================================');

    _isLoading = true;
    notifyListeners();

    try {
      await _api.logout();
      _wsManager.disconnect();
      await _api.clearToken();

      _currentUser = null;
      _isAuthenticated = false;
      _errorMessage = null;

      print('[AuthProvider] ‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('[AuthProvider] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: $e');
    } finally {
      _isLoading = false;
      notifyListeners();

      print('[AuthProvider] ========================================');
    }
  }

  void clearError() {
    _errorMessage = null;
    notifyListeners();
  }
}
