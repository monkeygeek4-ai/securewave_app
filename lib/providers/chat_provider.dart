// lib/providers/chat_provider.dart

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import '../services/api_service.dart';
import '../services/websocket_manager.dart';
import '../models/chat.dart';
import '../models/message.dart';
import 'dart:async';
import 'dart:math' as math;
import 'dart:html' as html show window, document;

class ChatProvider extends ChangeNotifier {
  final ApiService _api = ApiService();
  final WebSocketManager _wsManager = WebSocketManager.instance;

  // –ü–æ–¥–ø–∏—Å–∫–∏
  StreamSubscription? _wsSubscription;
  StreamSubscription? _focusSubscription;
  StreamSubscription? _blurSubscription;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  List<Chat> _chats = [];
  Map<String, List<Message>> _messages = {};
  Map<String, Map<String, bool>> _typingUsers = {};
  bool _isLoading = false;
  String? _errorMessage;
  String? _currentUserId;
  String? _currentChatId;
  bool _isWindowFocused = true;

  // –ì–µ—Ç—Ç–µ—Ä—ã
  List<Chat> get chats => _chats;
  Map<String, List<Message>> get messages => _messages;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;
  String? get currentUserId => _currentUserId;
  String? get currentChatId => _currentChatId;
  Map<String, Map<String, bool>> get typingStatus => _typingUsers;

  int get totalUnreadCount {
    int count = 0;
    for (final chat in _chats) {
      count += chat.unreadCount;
    }
    return count;
  }

  void _log(String message) {
    if (kDebugMode) {
      debugPrint('[ChatProvider] $message');
    }
  }

  String getCurrentUserId() {
    return _currentUserId ?? '';
  }

  ChatProvider() {
    _initializeWebSocketListeners();
    _initializeWindowFocusListeners();
  }

  void _initializeWebSocketListeners() {
    _wsSubscription?.cancel();

    _wsSubscription = _wsManager.messages.listen((data) {
      _log('üì® –ü–æ–ª—É—á–µ–Ω–æ WS —Å–æ–æ–±—â–µ–Ω–∏–µ: ${data['type']}');

      Future.microtask(() {
        switch (data['type']) {
          case '–Ω–æ–≤–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ':
          case 'message':
          case 'new_message':
            _log('üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
            _handleIncomingMessage(data['message'] ?? data);
            break;
          case 'typing':
          case '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–ø–µ—á–∞—Ç–∞–µ—Ç':
            _handleTypingStatus(data);
            break;
          case 'stopped_typing':
          case '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–ø–µ—Ä–µ—Å—Ç–∞–ª_–ø–µ—á–∞—Ç–∞—Ç—å':
            _handleStoppedTyping(data);
            break;
          case 'message_read':
          case '—Å–æ–æ–±—â–µ–Ω–∏–µ_–ø—Ä–æ—á–∏—Ç–∞–Ω–æ':
            _handleMessageRead(data);
            break;
          case 'chat_created':
            _handleChatCreated(data);
            break;
          case 'chat_deleted':
            _handleChatDeleted(data);
            break;
          case 'message_sent':
            _handleMessageSent(data);
            break;
          case 'user_online':
            _handleUserOnline(data);
            break;
          case 'user_offline':
            _handleUserOffline(data);
            break;
        }
      });
    });
  }

  void _initializeWindowFocusListeners() {
    if (kIsWeb) {
      _focusSubscription = html.window.onFocus.listen((_) {
        _isWindowFocused = true;
        _log('üîç –û–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å–µ');

        if (_currentChatId != null) {
          final chatIndex = _chats.indexWhere((c) => c.id == _currentChatId);
          if (chatIndex != -1 && _chats[chatIndex].unreadCount > 0) {
            _chats[chatIndex] = _chats[chatIndex].copyWith(unreadCount: 0);
            notifyListeners();
          }

          markMessagesAsRead(_currentChatId!);
        }
      });

      _blurSubscription = html.window.onBlur.listen((_) {
        _isWindowFocused = false;
        _log('üîç –û–∫–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–æ —Ñ–æ–∫—É—Å');
      });

      html.document.addEventListener('visibilitychange', (event) {
        final isVisible = !html.document.hidden!;
        _isWindowFocused = isVisible;

        _log('üì± –í–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${isVisible ? "–≤–∏–¥–∏–º–∞" : "—Å–∫—Ä—ã—Ç–∞"}');

        if (isVisible && _currentChatId != null) {
          final chatIndex = _chats.indexWhere((c) => c.id == _currentChatId);
          if (chatIndex != -1 && _chats[chatIndex].unreadCount > 0) {
            _chats[chatIndex] = _chats[chatIndex].copyWith(unreadCount: 0);
            notifyListeners();
          }

          markMessagesAsRead(_currentChatId!);
        }
      });
    }
  }

  // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú =====

  void setCurrentUserId(String userId) {
    _currentUserId = userId;
    _log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
  }

  void setCurrentChatId(String? chatId) {
    final previousChatId = _currentChatId;
    _currentChatId = chatId;

    if (previousChatId != null && _wsManager.isConnected) {
      _wsManager.leaveChat(previousChatId);
    }

    if (chatId != null) {
      final chatIndex = _chats.indexWhere((c) => c.id == chatId);
      if (chatIndex != -1 && _chats[chatIndex].unreadCount > 0) {
        _chats[chatIndex] = _chats[chatIndex].copyWith(unreadCount: 0);
        notifyListeners();
      }

      if (_wsManager.isConnected) {
        _wsManager.joinChat(chatId);
        _wsManager.markAsRead(chatId, null);
      }

      _markMessagesAsReadOnServer(chatId);
    }
  }

  // ===== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• =====

  Future<void> loadChats() async {
    _isLoading = true;
    notifyListeners();

    try {
      final chats = await _api.getChats();
      _chats = chats;
      _log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_chats.length} —á–∞—Ç–æ–≤');
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: $e');
      _errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã';
      _chats = [];

      if (e.toString().contains('500')) {
        _log('–í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–∞–∑–∞ —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞');
        _errorMessage = null;
      }
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> loadMessages(String chatId, {bool forceReload = false}) async {
    if (_messages[chatId] != null && !forceReload) {
      _log('–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ $chatId —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      return;
    }

    try {
      _log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ $chatId');
      final messages = await _api.getMessages(chatId);

      final uniqueMessages = <String, Message>{};
      final contentTimeMap = <String, DateTime>{};

      for (final message in messages) {
        final contentKey = '${message.senderId}_${message.content}';
        final messageTime = DateTime.parse(message.timestamp);

        if (!uniqueMessages.containsKey(message.id)) {
          if (contentTimeMap.containsKey(contentKey)) {
            final existingTime = contentTimeMap[contentKey]!;
            if (messageTime.difference(existingTime).inSeconds.abs() < 5) {
              _log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è');
              continue;
            }
          }

          uniqueMessages[message.id] = message;
          contentTimeMap[contentKey] = messageTime;
        }
      }

      _messages[chatId] = uniqueMessages.values.toList()
        ..sort((a, b) => a.timestamp.compareTo(b.timestamp));

      _log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_messages[chatId]!.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
      notifyListeners();
    } catch (e) {
      _log('‚åõ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: $e');
      _messages[chatId] = [];
      notifyListeners();
    }
  }

  List<Message> getMessages(String chatId) {
    return _messages[chatId] ?? [];
  }

  // ===== –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =====

  Future<bool> sendMessage({
    required String chatId,
    required String content,
    String type = 'text',
    String? replyToId,
  }) async {
    if (content.trim().isEmpty) return false;

    try {
      _log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç $chatId: $content');

      final tempId = 'temp_${DateTime.now().millisecondsSinceEpoch}';
      final tempMessage = Message(
        id: tempId,
        chatId: chatId,
        senderId: _currentUserId ?? '',
        senderName: '–í—ã',
        content: content,
        type: type,
        timestamp: DateTime.now().toIso8601String(),
        isRead: false,
        status: '–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è',
      );

      _messages[chatId] ??= [];
      _messages[chatId]!.add(tempMessage);
      notifyListeners();

      _log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: $tempId');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (_wsManager.isConnected) {
        _wsManager.sendMessage({
          'chatId': chatId,
          'content': content,
          'messageType': type,
          'tempId': tempId,
          'replyToId': replyToId,
        });
        _log('üì° –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ HTTP API
      Message? serverMessage = await _api.sendMessage(
        chatId: chatId,
        content: content,
        type: type,
        replyToId: replyToId,
      );

      if (serverMessage != null) {
        _log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${serverMessage.id}');

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        _messages[chatId]!.removeWhere((m) => m.id == tempId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bool messageExists = _messages[chatId]!.any((m) =>
            m.id == serverMessage.id ||
            (m.content == serverMessage.content &&
                m.senderId == serverMessage.senderId &&
                DateTime.parse(serverMessage.timestamp)
                        .difference(DateTime.parse(m.timestamp))
                        .inSeconds
                        .abs() <
                    10)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥

        if (!messageExists) {
          final messageWithStatus =
              serverMessage.copyWith(status: '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
          _messages[chatId]!.add(messageWithStatus);
          _log('‚úÖ –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${serverMessage.id}');
        } else {
          _log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª—å');
        }

        _messages[chatId]!.sort((a, b) => a.timestamp.compareTo(b.timestamp));
        _updateChatLastMessage(chatId, content);
        notifyListeners();
        return true;
      } else {
        _log('‚åõ –ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        final index = _messages[chatId]!.indexWhere((m) => m.id == tempId);
        if (index != -1) {
          _messages[chatId]![index] =
              _messages[chatId]![index].copyWith(status: '–æ—à–∏–±–∫–∞');
        }
        _errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ';
        notifyListeners();
        return false;
      }
    } catch (e) {
      _log('‚åõ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      _messages[chatId]?.removeWhere((m) => m.id.startsWith('temp_'));
      _errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ';
      notifyListeners();
      return false;
    }
  }

  // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–¢–ê–ú–ò =====

  Chat? getChatById(String chatId) {
    try {
      return _chats.firstWhere((chat) => chat.id == chatId);
    } catch (e) {
      return null;
    }
  }

  void updateChat(Chat updatedChat) {
    final index = _chats.indexWhere((chat) => chat.id == updatedChat.id);
    if (index != -1) {
      _chats[index] = updatedChat;

      _chats.sort((a, b) {
        if (a.isPinned && !b.isPinned) return -1;
        if (!a.isPinned && b.isPinned) return 1;

        final aTime = a.lastMessageTime ?? DateTime(1970);
        final bTime = b.lastMessageTime ?? DateTime(1970);
        return bTime.compareTo(aTime);
      });

      notifyListeners();
    }
  }

  Future<Chat?> createChat({
    required String userId,
    String? userName,
  }) async {
    try {
      final chat = await _api.createChat(
        userId: userId,
        userName: userName,
      );

      if (chat != null) {
        _chats.insert(0, chat);
        notifyListeners();
      }

      return chat;
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: $e');
      _errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç';
      return null;
    }
  }

  Future<bool> deleteChat(String chatId) async {
    try {
      final result = await _api.deleteChat(chatId);

      if (result) {
        _chats.removeWhere((chat) => chat.id == chatId);
        _messages.remove(chatId);
        notifyListeners();
        return true;
      }
      return false;
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: $e');
      return false;
    }
  }

  void togglePinChat(String chatId) {
    final chatIndex = _chats.indexWhere((c) => c.id == chatId);
    if (chatIndex != -1) {
      _chats[chatIndex] = _chats[chatIndex].copyWith(
        isPinned: !_chats[chatIndex].isPinned,
      );

      _chats.sort((a, b) {
        if (a.isPinned && !b.isPinned) return -1;
        if (!a.isPinned && b.isPinned) return 1;

        final aTime = a.lastMessageTime ?? DateTime(1970);
        final bTime = b.lastMessageTime ?? DateTime(1970);
        return bTime.compareTo(aTime);
      });

      notifyListeners();
    }
  }

  // ===== –°–¢–ê–¢–£–° –ü–ï–ß–ê–¢–ò =====

  void sendTypingStatus(String chatId, bool isTyping) {
    if (_wsManager.isConnected) {
      _wsManager.sendTyping(chatId, isTyping);
    }
  }

  String? getTypingUserName(String chatId) {
    final typingUsersInChat = _typingUsers[chatId];
    if (typingUsersInChat != null && typingUsersInChat.isNotEmpty) {
      return typingUsersInChat.keys.first;
    }
    return null;
  }

  // ===== –û–ß–ò–°–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =====

  void clearMessages(String chatId) {
    _messages[chatId] = [];
    notifyListeners();
  }

  // ===== –û–¢–ú–ï–¢–ö–ê –û –ü–†–û–ß–¢–ï–ù–ò–ò =====

  void markMessagesAsRead(String chatId) {
    final chatIndex = _chats.indexWhere((c) => c.id == chatId);
    if (chatIndex != -1) {
      _chats[chatIndex] = _chats[chatIndex].copyWith(unreadCount: 0);
      notifyListeners();
    }

    if (_wsManager.isConnected) {
      _wsManager.markAsRead(chatId, null);
    }

    _markMessagesAsReadOnServer(chatId);
  }

  Future<void> _markMessagesAsReadOnServer(String chatId) async {
    try {
      final success = await _api.markMessagesAsRead(chatId);

      if (success) {
        _log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');

        if (_messages[chatId] != null) {
          for (int i = 0; i < _messages[chatId]!.length; i++) {
            if (_messages[chatId]![i].senderId != _currentUserId) {
              _messages[chatId]![i] = _messages[chatId]![i].copyWith(
                isRead: true,
              );
            }
          }
          notifyListeners();
        }
      }
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  // ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ï–ì–û –°–û–û–ë–©–ï–ù–ò–Ø =====

  void _updateChatLastMessage(String chatId, String message) {
    final chatIndex = _chats.indexWhere((c) => c.id == chatId);
    if (chatIndex != -1) {
      _chats[chatIndex] = _chats[chatIndex].copyWith(
        lastMessage: message,
        lastMessageTime: DateTime.now(),
      );

      final chat = _chats.removeAt(chatIndex);
      _chats.insert(0, chat);

      notifyListeners();
    }
  }

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò WEBSOCKET =====

  void _handleIncomingMessage(Map<String, dynamic> data) {
    try {
      _log('üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: $data');

      final message = Message.fromJson(data);
      final chatId = message.chatId;

      _messages[chatId] ??= [];

      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      bool messageExists = _messages[chatId]!.any((m) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
        if (m.id == message.id) {
          _log('–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${message.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
          return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (m.id.startsWith('temp_') &&
            m.content == message.content &&
            m.senderId == message.senderId) {
          _log('–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º');
          return true;
        }

        // –î–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏ –≤—Ä–µ–º–µ–Ω–∏
        if (m.content == message.content &&
            m.senderId == message.senderId &&
            message.senderId == _currentUserId) {
          final timeDiff = DateTime.parse(message.timestamp)
              .difference(DateTime.parse(m.timestamp))
              .inSeconds
              .abs();
          if (timeDiff < 10) {
            _log('–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10 —Å–µ–∫—É–Ω–¥');
            return true;
          }
        }

        return false;
      });

      if (!messageExists) {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        _messages[chatId]!.removeWhere((m) =>
            m.id.startsWith('temp_') &&
            m.content == message.content &&
            m.senderId == message.senderId);

        _messages[chatId]!.add(message);
        _messages[chatId]!.sort((a, b) => a.timestamp.compareTo(b.timestamp));

        _log('‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç $chatId: ${message.id}');
      } else {
        _log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${message.id}');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
      final chatIndex = _chats.indexWhere((c) => c.id == chatId);
      if (chatIndex != -1) {
        final isCurrentChat = _currentChatId == chatId;
        final isOwnMessage = message.senderId == _currentUserId;

        int newUnreadCount;
        if (isCurrentChat && (!kIsWeb || _isWindowFocused)) {
          newUnreadCount = 0;

          if (!isOwnMessage && _wsManager.isConnected) {
            _wsManager.markAsRead(chatId, message.id);
          }
        } else if (isOwnMessage) {
          newUnreadCount = _chats[chatIndex].unreadCount;
        } else {
          newUnreadCount = _chats[chatIndex].unreadCount + 1;
        }

        _chats[chatIndex] = _chats[chatIndex].copyWith(
          lastMessage: message.content,
          lastMessageTime: DateTime.now(),
          unreadCount: newUnreadCount,
        );

        final chat = _chats.removeAt(chatIndex);
        _chats.insert(0, chat);

        _log('‚úÖ –ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: $chatId, –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${_chats[0].unreadCount}');
      }

      notifyListeners();
      _log('üéØ UI —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö');
    } catch (e) {
      _log('‚åõ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  void _handleMessageSent(Map<String, dynamic> data) {
    try {
      final tempId = data['tempId'];
      final message = Message.fromJson(data['message']);
      final chatId = message.chatId;

      if (_messages[chatId] != null && tempId != null) {
        final index = _messages[chatId]!.indexWhere((m) => m.id == tempId);
        if (index != -1) {
          _messages[chatId]![index] =
              message.copyWith(status: message.status ?? '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
          _log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ $tempId –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ ${message.id}');
          notifyListeners();
        }
      }
    } catch (e) {
      _log('‚åõ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏: $e');
    }
  }

  void _handleTypingStatus(Map<String, dynamic> data) {
    final chatId = data['chatId']?.toString();
    final userId = data['userId']?.toString();
    final userName = data['userName']?.toString() ?? userId ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    final isTyping = data['isTyping'] ?? true;

    if (chatId == null || userId == null) return;
    if (userId == _currentUserId) return;

    _typingUsers[chatId] ??= {};

    if (isTyping) {
      _typingUsers[chatId]![userName] = true;

      Future.delayed(Duration(seconds: 3), () {
        _typingUsers[chatId]?.remove(userName);
        notifyListeners();
      });
    } else {
      _typingUsers[chatId]!.remove(userName);
    }

    notifyListeners();
  }

  void _handleStoppedTyping(Map<String, dynamic> data) {
    data['isTyping'] = false;
    _handleTypingStatus(data);
  }

  void _handleMessageRead(Map<String, dynamic> data) {
    final chatId = data['chatId'];
    final messageId = data['messageId'];
    final status = data['status'] ?? '–ø—Ä–æ—á–∏—Ç–∞–Ω–æ';

    _log(
        'üìñ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏: chatId=$chatId, messageId=$messageId');

    if (chatId != null && _messages[chatId] != null) {
      if (messageId != null) {
        final messageIndex =
            _messages[chatId]!.indexWhere((m) => m.id == messageId.toString());
        if (messageIndex != -1) {
          _messages[chatId]![messageIndex] =
              _messages[chatId]![messageIndex].copyWith(
            isRead: true,
            status: status,
          );
          _log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è $messageId –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "$status"');
        }
      } else {
        for (int i = 0; i < _messages[chatId]!.length; i++) {
          if (_messages[chatId]![i].senderId == _currentUserId) {
            _messages[chatId]![i] = _messages[chatId]![i].copyWith(
              isRead: true,
              status: status,
            );
          }
        }
        _log('‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ $chatId –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
      }

      notifyListeners();
    }
  }

  void _handleChatCreated(Map<String, dynamic> data) {
    try {
      final chat = Chat.fromJson(data['chat'] ?? data);

      bool chatExists = _chats.any((c) => c.id == chat.id);

      if (!chatExists) {
        _chats.insert(0, chat);
        notifyListeners();
      }
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞: $e');
    }
  }

  void _handleChatDeleted(Map<String, dynamic> data) {
    final chatId = data['chatId'];
    if (chatId != null) {
      _chats.removeWhere((chat) => chat.id == chatId);
      _messages.remove(chatId);
      notifyListeners();
    }
  }

  void _handleUserOnline(Map<String, dynamic> data) {
    final userId = data['userId'];
    if (userId != null) {
      for (int i = 0; i < _chats.length; i++) {
        if (_chats[i].participants?.contains(userId) ?? false) {
          _chats[i] = _chats[i].copyWith(isOnline: true);
        }
      }
      notifyListeners();
    }
  }

  void _handleUserOffline(Map<String, dynamic> data) {
    final userId = data['userId'];
    if (userId != null) {
      for (int i = 0; i < _chats.length; i++) {
        if (_chats[i].participants?.contains(userId) ?? false) {
          _chats[i] = _chats[i].copyWith(isOnline: false);
        }
      }
      notifyListeners();
    }
  }

  void clearAll() {
    _chats.clear();
    _messages.clear();
    _typingUsers.clear();
    _currentChatId = null;
    notifyListeners();
  }

  void forceUpdateChats() {
    notifyListeners();
    _log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI');
  }

  @override
  void dispose() {
    _wsSubscription?.cancel();
    _focusSubscription?.cancel();
    _blurSubscription?.cancel();
    _wsManager.disconnect();
    super.dispose();
  }
}
