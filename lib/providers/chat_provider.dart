// lib/providers/chat_provider.dart

import 'package:flutter/foundation.dart';
import 'dart:async';
import 'dart:html' as html;
import '../models/chat.dart';
import '../models/message.dart';
import '../services/api_service.dart';
import '../services/websocket_manager.dart';

class ChatProvider extends ChangeNotifier {
  final ApiService _api = ApiService();
  final WebSocketManager _wsManager = WebSocketManager.instance;

  List<Chat> _chats = [];
  List<Message> _messages = [];
  String? _currentChatId;
  String? _currentUserId;
  bool _isLoading = false;
  String? _errorMessage;
  Map<String, bool> _typingStatus = {};
  bool _isWindowFocused = true;

  StreamSubscription? _wsSubscription;
  StreamSubscription? _focusSubscription;
  StreamSubscription? _blurSubscription;

  static const bool kIsWeb = bool.fromEnvironment('dart.library.js_util');

  List<Chat> get chats => _chats;
  List<Message> get messages => _messages;
  String? get currentChatId => _currentChatId;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;
  String? get currentUserId => _currentUserId ?? '';

  void _log(String message) {
    if (kDebugMode) {
      print('[ChatProvider] $message');
    }
  }

  bool isUserTyping(String chatId) {
    return _typingStatus[chatId] ?? false;
  }

  ChatProvider() {
    _initializeWebSocketListeners();
    _initializeWindowFocusListeners();
  }

  void _initializeWebSocketListeners() {
    _wsSubscription?.cancel();

    _wsSubscription = _wsManager.messages.listen((data) {
      _log('üì® –ü–æ–ª—É—á–µ–Ω–æ WS —Å–æ–æ–±—â–µ–Ω–∏–µ: ${data['type']}');

      Future.microtask(() {
        switch (data['type']) {
          case '–Ω–æ–≤–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ':
          case 'message':
          case 'new_message':
            _log('üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
            _handleIncomingMessage(data['message'] ?? data);
            break;
          case 'typing':
          case '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–ø–µ—á–∞—Ç–∞–µ—Ç':
            _handleTypingStatus(data);
            break;
          case 'stopped_typing':
          case '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–ø–µ—Ä–µ—Å—Ç–∞–ª_–ø–µ—á–∞—Ç–∞—Ç—å':
            _handleStoppedTyping(data);
            break;
          case 'message_read':
          case '—Å–æ–æ–±—â–µ–Ω–∏–µ_–ø—Ä–æ—á–∏—Ç–∞–Ω–æ':
            _handleMessageRead(data);
            break;
          case 'chat_created':
            _handleChatCreated(data);
            break;
          case 'chat_deleted':
            _handleChatDeleted(data);
            break;
          case 'message_sent':
            _handleMessageSent(data);
            break;
          case 'user_online':
            _handleUserOnline(data);
            break;
          case 'user_offline':
            _handleUserOffline(data);
            break;
        }
      });
    });
  }

  void _initializeWindowFocusListeners() {
    if (kIsWeb) {
      _focusSubscription = html.window.onFocus.listen((_) {
        _isWindowFocused = true;
        _log('üîç –û–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å–µ');

        if (_currentChatId != null) {
          final chatIndex = _chats.indexWhere((c) => c.id == _currentChatId);
          if (chatIndex != -1 && _chats[chatIndex].unreadCount > 0) {
            _chats[chatIndex] = _chats[chatIndex].copyWith(unreadCount: 0);
            notifyListeners();
          }

          markMessagesAsRead(_currentChatId!);
        }
      });

      _blurSubscription = html.window.onBlur.listen((_) {
        _isWindowFocused = false;
        _log('üîç –û–∫–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–æ —Ñ–æ–∫—É—Å');
      });

      html.document.addEventListener('visibilitychange', (event) {
        final isVisible = !html.document.hidden!;
        _isWindowFocused = isVisible;

        _log('üì± –í–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${isVisible ? "–≤–∏–¥–∏–º–∞" : "—Å–∫—Ä—ã—Ç–∞"}');

        if (isVisible && _currentChatId != null) {
          final chatIndex = _chats.indexWhere((c) => c.id == _currentChatId);
          if (chatIndex != -1 && _chats[chatIndex].unreadCount > 0) {
            _chats[chatIndex] = _chats[chatIndex].copyWith(unreadCount: 0);
            notifyListeners();
          }

          markMessagesAsRead(_currentChatId!);
        }
      });
    }
  }

  void setCurrentUserId(String userId) {
    _currentUserId = userId;
    _log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
  }

  void setCurrentChatId(String? chatId) {
    _currentChatId = chatId;
    _log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π —á–∞—Ç: $chatId');

    if (chatId != null) {
      final chatIndex = _chats.indexWhere((c) => c.id == chatId);
      if (chatIndex != -1 && _chats[chatIndex].unreadCount > 0) {
        _chats[chatIndex] = _chats[chatIndex].copyWith(unreadCount: 0);
        notifyListeners();
      }

      markMessagesAsRead(chatId);
    }
  }

  Future<void> loadChats() async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      _log('–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...');
      _chats = await _api.getChats();
      _log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_chats.length} —á–∞—Ç–æ–≤');
      _isLoading = false;
      notifyListeners();
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: $e');
      _errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã';
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> loadMessages(String chatId) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      _log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞: $chatId');
      _messages = await _api.getMessages(chatId);
      _log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π');
      _isLoading = false;
      notifyListeners();
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: $e');
      _errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è';
      _isLoading = false;
      notifyListeners();
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã chatId –∏ content
  Future<void> sendMessage(String content,
      {String? chatId, String? replyToId}) async {
    final targetChatId = chatId ?? _currentChatId;

    if (targetChatId == null || content.trim().isEmpty) {
      _log(
          '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: chatId = $targetChatId, content –ø—É—Å—Ç–æ–π');
      return;
    }

    try {
      _log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç $targetChatId');

      final message = await _api.sendMessage(targetChatId, content);

      if (message != null) {
        _log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message.id}');

        _addMessageLocally(message);
        _updateChatLastMessage(message);
      } else {
        _log('–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      }
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      _errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ';
      notifyListeners();
    }
  }

  void _addMessageLocally(Message message) {
    if (!_messages.any((m) => m.id == message.id)) {
      _messages.add(message);
      notifyListeners();
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ timestamp –∫–∞–∫ String
  void _updateChatLastMessage(Message message) {
    final chatIndex = _chats.indexWhere((c) => c.id == message.chatId);
    if (chatIndex != -1) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º String timestamp –≤ DateTime, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      DateTime? messageTime;

      if (message.timestamp is String) {
        try {
          messageTime = DateTime.parse(message.timestamp as String);
        } catch (e) {
          _log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ timestamp: $e');
          messageTime = DateTime.now();
        }
      } else if (message.timestamp is DateTime) {
        messageTime = message.timestamp as DateTime;
      } else {
        messageTime = DateTime.now();
      }

      _chats[chatIndex] = _chats[chatIndex].copyWith(
        lastMessage: message.content,
        lastMessageTime: messageTime,
      );

      _chats.sort((a, b) {
        final aTime = a.lastMessageTime ?? DateTime.now();
        final bTime = b.lastMessageTime ?? DateTime.now();
        return bTime.compareTo(aTime);
      });

      notifyListeners();
    }
  }

  Future<void> createOrGetChat(String userId) async {
    try {
      _log('–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: $userId');

      final chat = await _api.createChat(userId);

      if (chat != null) {
        _log('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω/–ø–æ–ª—É—á–µ–Ω: ${chat.id}');

        final existingIndex = _chats.indexWhere((c) => c.id == chat.id);

        if (existingIndex == -1) {
          _chats.insert(0, chat);
        } else {
          _chats[existingIndex] = chat;
        }

        notifyListeners();
      }
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: $e');
      _errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç';
      notifyListeners();
    }
  }

  Future<void> deleteChat(String chatId) async {
    try {
      _log('–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞: $chatId');

      final success = await _api.deleteChat(chatId);

      if (success) {
        _chats.removeWhere((c) => c.id == chatId);

        if (_currentChatId == chatId) {
          _currentChatId = null;
          _messages.clear();
        }

        notifyListeners();
        _log('–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      }
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: $e');
      _errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç';
      notifyListeners();
    }
  }

  Future<void> markMessagesAsRead(String chatId) async {
    try {
      await _api.markMessagesAsRead(chatId);
      _log('–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞: $chatId');
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  Chat? getChatById(String chatId) {
    try {
      return _chats.firstWhere((c) => c.id == chatId);
    } catch (e) {
      return null;
    }
  }

  List<Message> getMessages(String chatId) {
    return _messages.where((m) => m.chatId == chatId).toList();
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å List<String> participants
  String? getTypingUserName(String chatId) {
    if (!isUserTyping(chatId)) return null;

    final chat = getChatById(chatId);
    if (chat == null) return null;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–º—è, —Ç–∞–∫ –∫–∞–∫ participants - —ç—Ç–æ List<String>, –∞ –Ω–µ List<User>
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å username —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
    return "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫";
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã chatId –∏ isTyping
  Future<void> sendTypingStatus(String chatId, bool isTyping) async {
    _wsManager.send({
      'type': isTyping ? 'typing' : 'stopped_typing',
      'chatId': chatId,
      'userId': _currentUserId,
    });
  }

  Future<void> togglePinChat(String chatId) async {
    final chatIndex = _chats.indexWhere((c) => c.id == chatId);
    if (chatIndex == -1) return;

    _chats[chatIndex] = _chats[chatIndex].copyWith(
      isPinned: !_chats[chatIndex].isPinned,
    );

    _chats.sort((a, b) {
      if (a.isPinned && !b.isPinned) return -1;
      if (!a.isPinned && b.isPinned) return 1;

      final aTime = a.lastMessageTime ?? DateTime.now();
      final bTime = b.lastMessageTime ?? DateTime.now();
      return bTime.compareTo(aTime);
    });

    notifyListeners();
  }

  Future<void> clearMessages(String chatId) async {
    _messages.removeWhere((m) => m.chatId == chatId);
    notifyListeners();
  }

  void _handleIncomingMessage(Map<String, dynamic> data) {
    try {
      final message = Message.fromJson(data);
      _log('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.id} –≤ —á–∞—Ç–µ ${message.chatId}');

      if (message.chatId == _currentChatId) {
        _addMessageLocally(message);

        if (_isWindowFocused) {
          markMessagesAsRead(message.chatId);
        }
      }

      _updateChatLastMessage(message);

      final chatIndex = _chats.indexWhere((c) => c.id == message.chatId);
      if (chatIndex != -1 && message.chatId != _currentChatId) {
        final currentUnread = _chats[chatIndex].unreadCount;
        _chats[chatIndex] = _chats[chatIndex].copyWith(
          unreadCount: currentUnread + 1,
        );
        notifyListeners();
      }
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  void _handleTypingStatus(Map<String, dynamic> data) {
    final chatId = data['chatId'] ?? data['chat_id'];
    if (chatId != null) {
      _typingStatus[chatId] = true;
      notifyListeners();

      Future.delayed(Duration(seconds: 3), () {
        _typingStatus[chatId] = false;
        notifyListeners();
      });
    }
  }

  void _handleStoppedTyping(Map<String, dynamic> data) {
    final chatId = data['chatId'] ?? data['chat_id'];
    if (chatId != null) {
      _typingStatus[chatId] = false;
      notifyListeners();
    }
  }

  void _handleMessageRead(Map<String, dynamic> data) {
    _log('–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: $data');
  }

  void _handleChatCreated(Map<String, dynamic> data) {
    try {
      final chat = Chat.fromJson(data['chat']);
      _chats.insert(0, chat);
      notifyListeners();
      _log('–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: ${chat.id}');
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: $e');
    }
  }

  void _handleChatDeleted(Map<String, dynamic> data) {
    final chatId = data['chatId'];
    _chats.removeWhere((c) => c.id == chatId);
    notifyListeners();
    _log('–ß–∞—Ç —É–¥–∞–ª–µ–Ω: $chatId');
  }

  void _handleMessageSent(Map<String, dynamic> data) {
    _log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $data');
  }

  void _handleUserOnline(Map<String, dynamic> data) {
    final userId = data['userId'];
    _log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω: $userId');
  }

  void _handleUserOffline(Map<String, dynamic> data) {
    final userId = data['userId'];
    _log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω: $userId');
  }

  @override
  void dispose() {
    _wsSubscription?.cancel();
    _focusSubscription?.cancel();
    _blurSubscription?.cancel();
    super.dispose();
  }
}
