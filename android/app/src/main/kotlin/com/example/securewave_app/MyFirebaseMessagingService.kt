package com.securewave.app

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.media.RingtoneManager
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage

class MyFirebaseMessagingService : FirebaseMessagingService() {

    companion object {
        private const val TAG = "FCM_Service"
        private const val CHANNEL_MESSAGES = "messages_channel"
        private const val CHANNEL_CALLS = "calls_channel"
    }

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "üî• Firebase Service —Å–æ–∑–¥–∞–Ω")
        createNotificationChannels()
    }

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ FCM —Ç–æ–∫–µ–Ω–∞
     */
    override fun onNewToken(token: String) {
        super.onNewToken(token)
        Log.d(TAG, "üîë –ù–æ–≤—ã–π FCM —Ç–æ–∫–µ–Ω: $token")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤–æ Flutter
        sendTokenToFlutter(token)
        
        // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥ —Å—Ä–∞–∑—É –∑–¥–µ—Å—å
        // sendTokenToBackend(token)
    }

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        super.onMessageReceived(remoteMessage)
        
        Log.d(TAG, "üì© –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç: ${remoteMessage.from}")
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        val data = remoteMessage.data
        val type = data["type"] ?: "unknown"
        
        Log.d(TAG, "üì¶ –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $type")
        Log.d(TAG, "üì¶ –î–∞–Ω–Ω—ã–µ: $data")
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        when (type) {
            "new_message" -> handleNewMessage(remoteMessage)
            "incoming_call" -> handleIncomingCall(remoteMessage)
            "call_ended" -> handleCallEnded(remoteMessage)
            else -> {
                Log.w(TAG, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $type")
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                showDefaultNotification(remoteMessage)
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private fun handleNewMessage(remoteMessage: RemoteMessage) {
        val data = remoteMessage.data
        val chatId = data["chatId"] ?: return
        val senderName = data["senderName"] ?: "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        val messageText = data["messageText"] ?: ""
        
        Log.d(TAG, "üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç $senderName: $messageText")
        
        val notification = remoteMessage.notification
        val title = notification?.title ?: senderName
        val body = notification?.body ?: messageText
        
        showMessageNotification(
            title = title,
            message = body,
            chatId = chatId
        )
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
     */
    private fun handleIncomingCall(remoteMessage: RemoteMessage) {
        val data = remoteMessage.data
        val callId = data["callId"] ?: return
        val callerName = data["callerName"] ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        val callType = data["callType"] ?: "audio"
        
        Log.d(TAG, "üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç $callerName (—Ç–∏–ø: $callType)")
        
        val notification = remoteMessage.notification
        val title = notification?.title ?: "–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"
        val body = notification?.body ?: "–ó–≤–æ–Ω–æ–∫ –æ—Ç $callerName"
        
        showCallNotification(
            title = title,
            message = body,
            callId = callId,
            callerName = callerName,
            callType = callType
        )
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
     */
    private fun handleCallEnded(remoteMessage: RemoteMessage) {
        val data = remoteMessage.data
        val callId = data["callId"] ?: return
        
        Log.d(TAG, "üìµ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: $callId")
        
        // –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.cancel(callId.hashCode())
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
     */
    private fun showMessageNotification(title: String, message: String, chatId: String) {
        val intent = Intent(this, MainActivity::class.java).apply {
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
            putExtra("type", "new_message")
            putExtra("chatId", chatId)
        }
        
        val pendingIntent = PendingIntent.getActivity(
            this,
            chatId.hashCode(),
            intent,
            PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)
        
        val notificationBuilder = NotificationCompat.Builder(this, CHANNEL_MESSAGES)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle(title)
            .setContentText(message)
            .setAutoCancel(true)
            .setSound(defaultSoundUri)
            .setContentIntent(pendingIntent)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
        
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.notify(chatId.hashCode(), notificationBuilder.build())
        
        Log.d(TAG, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–æ")
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
     */
    private fun showCallNotification(
        title: String,
        message: String,
        callId: String,
        callerName: String,
        callType: String
    ) {
        // Intent –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞
        val acceptIntent = Intent(this, MainActivity::class.java).apply {
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)
            putExtra("type", "incoming_call")
            putExtra("callId", callId)
            putExtra("callerName", callerName)
            putExtra("callType", callType)
            putExtra("action", "accept")
        }
        
        val acceptPendingIntent = PendingIntent.getActivity(
            this,
            (callId + "_accept").hashCode(),
            acceptIntent,
            PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE
        )
        
        // Intent –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
        val declineIntent = Intent(this, MainActivity::class.java).apply {
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
            putExtra("type", "incoming_call")
            putExtra("callId", callId)
            putExtra("action", "decline")
        }
        
        val declinePendingIntent = PendingIntent.getActivity(
            this,
            (callId + "_decline").hashCode(),
            declineIntent,
            PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val callSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE)
        
        val notificationBuilder = NotificationCompat.Builder(this, CHANNEL_CALLS)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle(title)
            .setContentText(message)
            .setAutoCancel(false)
            .setOngoing(true)
            .setSound(callSoundUri)
            .setPriority(NotificationCompat.PRIORITY_MAX)
            .setCategory(NotificationCompat.CATEGORY_CALL)
            .setFullScreenIntent(acceptPendingIntent, true)
            .addAction(R.drawable.ic_call_accept, "–ü—Ä–∏–Ω—è—Ç—å", acceptPendingIntent)
            .addAction(R.drawable.ic_call_decline, "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", declinePendingIntent)
        
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.notify(callId.hashCode(), notificationBuilder.build())
        
        Log.d(TAG, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ –ø–æ–∫–∞–∑–∞–Ω–æ")
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    private fun showDefaultNotification(remoteMessage: RemoteMessage) {
        val notification = remoteMessage.notification ?: return
        val title = notification.title ?: "SecureWave"
        val body = notification.body ?: ""
        
        val intent = Intent(this, MainActivity::class.java).apply {
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
        }
        
        val pendingIntent = PendingIntent.getActivity(
            this,
            0,
            intent,
            PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val notificationBuilder = NotificationCompat.Builder(this, CHANNEL_MESSAGES)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle(title)
            .setContentText(body)
            .setAutoCancel(true)
            .setContentIntent(pendingIntent)
        
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.notify(0, notificationBuilder.build())
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android 8.0+
     */
    private fun createNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            
            // –ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
            val messagesChannel = NotificationChannel(
                CHANNEL_MESSAGES,
                "–°–æ–æ–±—â–µ–Ω–∏—è",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
                enableVibration(true)
                enableLights(true)
            }
            
            // –ö–∞–Ω–∞–ª –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
            val callsChannel = NotificationChannel(
                CHANNEL_CALLS,
                "–ó–≤–æ–Ω–∫–∏",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö"
                enableVibration(true)
                enableLights(true)
                setBypassDnd(true)
            }
            
            notificationManager.createNotificationChannel(messagesChannel)
            notificationManager.createNotificationChannel(callsChannel)
            
            Log.d(TAG, "üì± –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã")
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤–æ Flutter
     */
    private fun sendTokenToFlutter(token: String) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MethodChannel –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–∞ –≤–æ Flutter
        // –ò–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ SharedPreferences –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ Flutter
        val sharedPreferences = getSharedPreferences("FCM_PREFS", Context.MODE_PRIVATE)
        sharedPreferences.edit().putString("fcm_token", token).apply()
        Log.d(TAG, "üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ SharedPreferences")
    }
}