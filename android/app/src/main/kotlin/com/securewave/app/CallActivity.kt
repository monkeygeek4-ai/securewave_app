package com.securewave.app

import android.app.KeyguardManager
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.PowerManager
import android.util.Log
import android.view.WindowManager
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class CallActivity : AppCompatActivity() {
    private val TAG = "CallActivity"
    
    private lateinit var callerNameView: TextView
    private lateinit var callTypeView: TextView
    private lateinit var callerAvatarView: ImageView
    private lateinit var acceptButton: Button
    private lateinit var declineButton: Button
    
    private var callId: String? = null
    private var callerName: String? = null
    private var callType: String? = null
    
    private var wakeLock: PowerManager.WakeLock? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        Log.d(TAG, "========================================")
        Log.d(TAG, "üìû CallActivity onCreate")
        Log.d(TAG, "========================================")
        
        // ‚≠ê‚≠ê‚≠ê –ö–†–ò–¢–ò–ß–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ü–û–í–ï–†–• LOCKSCREEN
        setupLockscreenWindow()
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Intent
        callId = intent.getStringExtra("callId")
        callerName = intent.getStringExtra("callerName") ?: "Unknown"
        callType = intent.getStringExtra("callType") ?: "audio"
        
        Log.d(TAG, "Call ID: $callId")
        Log.d(TAG, "Caller Name: $callerName")
        Log.d(TAG, "Call Type: $callType")
        Log.d(TAG, "========================================")
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout
        setContentView(R.layout.activity_call)
        
        // –í–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –¥–µ—Ä–∂–∏–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–º
        acquireWakeLock()
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        callerNameView = findViewById(R.id.callerName)
        callTypeView = findViewById(R.id.callType)
        callerAvatarView = findViewById(R.id.callerAvatar)
        acceptButton = findViewById(R.id.acceptButton)
        declineButton = findViewById(R.id.declineButton)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        callerNameView.text = callerName
        callTypeView.text = if (callType == "video") "üìπ –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫" else "üìû –ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫"
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        acceptButton.setOnClickListener {
            Log.d(TAG, "‚úÖ –ö–Ω–æ–ø–∫–∞ ACCEPT –Ω–∞–∂–∞—Ç–∞")
            acceptCall()
        }
        
        declineButton.setOnClickListener {
            Log.d(TAG, "‚ùå –ö–Ω–æ–ø–∫–∞ DECLINE –Ω–∞–∂–∞—Ç–∞")
            declineCall()
        }
        
        Log.d(TAG, "‚úÖ CallActivity –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    }
    
    /**
     * ‚≠ê‚≠ê‚≠ê –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–ù–ê –î–õ–Ø –ü–û–ö–ê–ó–ê –ü–û–í–ï–†–• LOCKSCREEN (MIUI OPTIMIZED)
     */
    private fun setupLockscreenWindow() {
        // ‚≠ê –î–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π Android
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {
            // Android 8.1+ (API 27+)
            Log.d(TAG, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Android 8.1+")
            setShowWhenLocked(true)
            setTurnScreenOn(true)
            
            val keyguardManager = getSystemService(Context.KEYGUARD_SERVICE) as KeyguardManager
            keyguardManager.requestDismissKeyguard(this, null)
            
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            // Android 8.0 (API 26)
            Log.d(TAG, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Android 8.0")
            setShowWhenLocked(true)
            setTurnScreenOn(true)
            
        } else {
            // Android 7.1 –∏ –Ω–∏–∂–µ (API 25-)
            Log.d(TAG, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Android 7.1 –∏ –Ω–∏–∂–µ")
            window.addFlags(
                WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED or
                WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD or
                WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON
            )
        }
        
        // ‚≠ê‚≠ê‚≠ê –ö–†–ò–¢–ò–ß–ù–û –î–õ–Ø MIUI: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
        window.addFlags(
            WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON or
            WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON or
            WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS or
            WindowManager.LayoutParams.FLAG_FULLSCREEN or
            WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED
        )
        
        // ‚≠ê –î–ª—è MIUI: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        window.attributes = window.attributes.apply {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫–Ω–æ "–≤–∞–∂–Ω—ã–º"
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
            }
        }
        
        Log.d(TAG, "‚úÖ Lockscreen window flags —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (MIUI optimized)")
    }
    
    /**
     * –í–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω –∏—Å–ø–æ–ª—å–∑—É—è WakeLock
     */
    private fun acquireWakeLock() {
        try {
            val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
            wakeLock = powerManager.newWakeLock(
                PowerManager.SCREEN_BRIGHT_WAKE_LOCK or
                PowerManager.ACQUIRE_CAUSES_WAKEUP or
                PowerManager.ON_AFTER_RELEASE,
                "SecureWave:CallWakeLock"
            )
            wakeLock?.acquire(60 * 1000L) // 60 —Å–µ–∫—É–Ω–¥
            Log.d(TAG, "‚úÖ WakeLock –ø–æ–ª—É—á–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è WakeLock: ${e.message}")
        }
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º WakeLock
     */
    private fun releaseWakeLock() {
        try {
            wakeLock?.let {
                if (it.isHeld) {
                    it.release()
                    Log.d(TAG, "‚úÖ WakeLock –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
                }
            }
            wakeLock = null
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è WakeLock: ${e.message}")
        }
    }
    
    /**
     * ‚≠ê‚≠ê‚≠ê –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫
     */
    private fun acceptCall() {
        Log.d(TAG, "========================================")
        Log.d(TAG, "üìû –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫: $callId")
        Log.d(TAG, "========================================")
        
        releaseWakeLock()
        CallService.resetCallActivityFlag()
        
        // ‚≠ê‚≠ê‚≠ê –ò–°–ü–û–õ–¨–ó–£–ï–ú ACTION + DATA –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–æ–≤–æ–≥–æ Intent
        val intent = Intent(this, MainActivity::class.java).apply {
            action = Intent.ACTION_VIEW
            data = Uri.parse("securewave://call/$callId/accept")
            
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
            
            putExtra("type", "incoming_call")
            putExtra("callId", callId)
            putExtra("callerName", callerName)
            putExtra("callType", callType)
            putExtra("action", "accept")
        }
        
        Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ MainActivity:")
        Log.d(TAG, "  - action: ${intent.action}")
        Log.d(TAG, "  - data: ${intent.data}")
        Log.d(TAG, "========================================")
        
        startActivity(intent)
        finish()
        
        Log.d(TAG, "‚úÖ MainActivity –∑–∞–ø—É—â–µ–Ω–∞ —Å action=accept")
    }
    
    /**
     * ‚≠ê‚≠ê‚≠ê –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫
     */
    private fun declineCall() {
        Log.d(TAG, "========================================")
        Log.d(TAG, "‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫: $callId")
        Log.d(TAG, "========================================")
        
        releaseWakeLock()
        CallService.resetCallActivityFlag()
        
        val intent = Intent(this, MainActivity::class.java).apply {
            action = Intent.ACTION_VIEW
            data = Uri.parse("securewave://call/$callId/decline")
            
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
            
            putExtra("type", "incoming_call")
            putExtra("callId", callId)
            putExtra("callerName", callerName)
            putExtra("callType", callType)
            putExtra("action", "decline")
        }
        
        Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ MainActivity")
        startActivity(intent)
        finish()
        
        Log.d(TAG, "‚úÖ MainActivity –∑–∞–ø—É—â–µ–Ω–∞ —Å action=decline")
    }
    
    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "CallActivity onDestroy")
        CallService.resetCallActivityFlag()
        releaseWakeLock()
    }
    
    override fun onBackPressed() {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤–æ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞
        Log.d(TAG, "‚ö†Ô∏è Back pressed –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    }
}