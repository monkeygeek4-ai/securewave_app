package com.securewave.app

import android.content.Intent
import android.os.Bundle
import android.util.Log
import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodChannel

class MainActivity: FlutterActivity() {
    // ‚≠ê –î–í–ê –ö–ê–ù–ê–õ–ê: –æ–¥–∏–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –¥—Ä—É–≥–æ–π –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
    private val NOTIFICATION_CHANNEL = "com.securewave.app/notification"
    private val CALL_CHANNEL = "com.securewave.app/call"
    
    private var notificationChannel: MethodChannel? = null
    private var callChannel: MethodChannel? = null
    
    companion object {
        private const val TAG = "MainActivity"
    }

    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)
        
        Log.d(TAG, "========================================")
        Log.d(TAG, "üöÄ configureFlutterEngine –≤—ã–∑–≤–∞–Ω")
        Log.d(TAG, "========================================")
        
        // ============================================
        // 1Ô∏è‚É£ –ö–ê–ù–ê–õ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
        // ============================================
        notificationChannel = MethodChannel(
            flutterEngine.dartExecutor.binaryMessenger,
            NOTIFICATION_CHANNEL
        )
        Log.d(TAG, "‚úÖ Notification MethodChannel —Å–æ–∑–¥–∞–Ω: $NOTIFICATION_CHANNEL")
        
        // ============================================
        // 2Ô∏è‚É£ –ö–ê–ù–ê–õ –î–õ–Ø –ó–í–û–ù–ö–û–í (–Ω–æ–≤—ã–π)
        // ============================================
        callChannel = MethodChannel(
            flutterEngine.dartExecutor.binaryMessenger,
            CALL_CHANNEL
        )
        
        callChannel?.setMethodCallHandler { call, result ->
            Log.d(TAG, "========================================")
            Log.d(TAG, "üìû –ü–æ–ª—É—á–µ–Ω –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞: ${call.method}")
            Log.d(TAG, "–ê—Ä–≥—É–º–µ–Ω—Ç—ã: ${call.arguments}")
            Log.d(TAG, "========================================")
            
            when (call.method) {
                "showCallScreen" -> {
                    try {
                        val callId = call.argument<String>("callId")
                        val callerName = call.argument<String>("callerName")
                        val callType = call.argument<String>("callType")
                        
                        Log.d(TAG, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–≤–æ–Ω–∫–∞:")
                        Log.d(TAG, "  - callId: $callId")
                        Log.d(TAG, "  - callerName: $callerName")
                        Log.d(TAG, "  - callType: $callType")
                        
                        if (callId == null || callerName == null) {
                            Log.e(TAG, "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                            result.error("INVALID_ARGUMENTS", "Missing required arguments", null)
                            return@setMethodCallHandler
                        }
                        
                        Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ CallActivity...")
                        
                        val intent = Intent(this, CallActivity::class.java).apply {
                            putExtra("callId", callId)
                            putExtra("callerName", callerName)
                            putExtra("callType", callType ?: "audio")
                            
                            // –§–ª–∞–≥–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ (–¥–∞–∂–µ lockscreen)
                            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
                            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
                        }
                        
                        startActivity(intent)
                        
                        Log.d(TAG, "‚úÖ CallActivity –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        result.success(true)
                        
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ CallActivity: ${e.message}")
                        Log.e(TAG, "Stack trace:", e)
                        result.error("START_ACTIVITY_ERROR", e.message, null)
                    }
                }
                else -> {
                    Log.w(TAG, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: ${call.method}")
                    result.notImplemented()
                }
            }
            
            Log.d(TAG, "========================================")
        }
        
        Log.d(TAG, "‚úÖ Call MethodChannel —Å–æ–∑–¥–∞–Ω: $CALL_CHANNEL")
        Log.d(TAG, "========================================")
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d(TAG, "========================================")
        Log.d(TAG, "üöÄ MainActivity onCreate")
        Log.d(TAG, "========================================")
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Intent –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        handleIntent(intent)
    }

    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        Log.d(TAG, "========================================")
        Log.d(TAG, "üì¨ onNewIntent –≤—ã–∑–≤–∞–Ω")
        Log.d(TAG, "========================================")
        
        setIntent(intent)
        handleIntent(intent)
    }

    override fun onResume() {
        super.onResume()
        Log.d(TAG, "========================================")
        Log.d(TAG, "‚ñ∂Ô∏è onResume –≤—ã–∑–≤–∞–Ω")
        Log.d(TAG, "========================================")
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Intent –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        handleIntent(intent)
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ Intent –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    private fun handleIntent(intent: Intent?) {
        if (intent == null) {
            Log.d(TAG, "‚ö†Ô∏è Intent is null")
            return
        }
        
        val type = intent.getStringExtra("type")
        Log.d(TAG, "========================================")
        Log.d(TAG, "üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ Intent")
        Log.d(TAG, "========================================")
        Log.d(TAG, "Type: $type")
        
        if (type == null) {
            Log.d(TAG, "‚ÑπÔ∏è Type is null - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            return
        }
        
        when (type) {
            "new_message" -> {
                val chatId = intent.getStringExtra("chatId")
                Log.d(TAG, "========================================")
                Log.d(TAG, "üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                Log.d(TAG, "ChatId: $chatId")
                Log.d(TAG, "========================================")
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–æ Flutter
                sendToFlutter(mapOf(
                    "type" to "new_message",
                    "chatId" to chatId
                ))
            }
            
            "incoming_call" -> {
                val callId = intent.getStringExtra("callId")
                val callerName = intent.getStringExtra("callerName")
                val callType = intent.getStringExtra("callType")
                val action = intent.getStringExtra("action")
                
                Log.d(TAG, "========================================")
                Log.d(TAG, "üìûüìûüìû –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö!")
                Log.d(TAG, "========================================")
                Log.d(TAG, "CallId: $callId")
                Log.d(TAG, "CallerName: $callerName")
                Log.d(TAG, "CallType: $callType")
                Log.d(TAG, "Action: $action")
                Log.d(TAG, "========================================")
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–æ Flutter
                sendToFlutter(mapOf(
                    "type" to "incoming_call",
                    "callId" to callId,
                    "callerName" to callerName,
                    "callType" to callType,
                    "action" to action
                ))
            }
        }
        
        // –û—á–∏—â–∞–µ–º extras —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        intent.removeExtra("type")
        intent.removeExtra("chatId")
        intent.removeExtra("callId")
        intent.removeExtra("callerName")
        intent.removeExtra("callType")
        intent.removeExtra("action")
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ Flutter —á–µ—Ä–µ–∑ MethodChannel (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
     */
    private fun sendToFlutter(data: Map<String, Any?>) {
        if (notificationChannel == null) {
            Log.w(TAG, "‚ö†Ô∏è Notification MethodChannel is null, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return
        }
        
        Log.d(TAG, "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ Flutter —á–µ—Ä–µ–∑ Notification MethodChannel")
        Log.d(TAG, "Data: $data")
        
        try {
            notificationChannel?.invokeMethod("onNotificationTap", data)
            Log.d(TAG, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–æ Flutter")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ Flutter: ${e.message}")
            e.printStackTrace()
        }
    }
}