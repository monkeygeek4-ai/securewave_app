package com.securewave.app

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import android.util.Log
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage

class MyFirebaseMessagingService : FirebaseMessagingService() {

    companion object {
        private const val TAG = "FCM_Service"
        private const val CHANNEL_ID_CALLS = "calls_channel"
        private const val CHANNEL_ID_MESSAGES = "messages_channel"
    }

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "========================================")
        Log.d(TAG, "üî• Firebase Service —Å–æ–∑–¥–∞–Ω")
        Log.d(TAG, "========================================")
        createNotificationChannels()
    }

    /**
     * ‚≠ê‚≠ê‚≠ê –ö–†–ò–¢–ò–ß–ù–û: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç FCM —Å–æ–æ–±—â–µ–Ω–∏–µ
     * –†–∞–±–æ—Ç–∞–µ—Ç –í–°–ï–ì–î–ê: foreground, background, terminated!
     */
    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        Log.d(TAG, "========================================")
        Log.d(TAG, "üì© üì© üì© FCM MESSAGE RECEIVED! üì© üì© üì©")
        Log.d(TAG, "========================================")
        Log.d(TAG, "–û—Ç: ${remoteMessage.from}")
        Log.d(TAG, "Message ID: ${remoteMessage.messageId}")
        Log.d(TAG, "========================================")

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        val data = remoteMessage.data
        val type = data["type"]

        Log.d(TAG, "üì¶ –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $type")
        Log.d(TAG, "üì¶ –í—Å–µ –¥–∞–Ω–Ω—ã–µ:")
        data.forEach { (key, value) ->
            Log.d(TAG, "  - $key: $value")
        }
        Log.d(TAG, "========================================")

        when (type) {
            "incoming_call" -> {
                Log.d(TAG, "üìûüìûüìû –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù!")
                
                val callId = data["callId"] ?: data["call_id"] ?: run {
                    Log.e(TAG, "‚ùå –û–®–ò–ë–ö–ê: callId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                    return
                }
                
                val callerName = data["callerName"] ?: data["caller_name"] ?: "Unknown"
                val callType = data["callType"] ?: data["call_type"] ?: "audio"
                
                Log.d(TAG, "========================================")
                Log.d(TAG, "üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–≤–æ–Ω–∫–∞:")
                Log.d(TAG, "  - callId: $callId")
                Log.d(TAG, "  - callerName: $callerName")
                Log.d(TAG, "  - callType: $callType")
                Log.d(TAG, "========================================")
                
                // ‚≠ê‚≠ê‚≠ê –ó–ê–ü–£–°–ö–ê–ï–ú CallService –ù–ê–ü–†–Ø–ú–£–Æ!
                Log.d(TAG, "üöÄüöÄüöÄ –ó–ê–ü–£–°–ö–ê–ï–ú CallService...")
                try {
                    CallService.startService(this, callId, callerName, callType)
                    Log.d(TAG, "‚úÖ CallService.startService() –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ CallService: ${e.message}")
                    e.printStackTrace()
                }
            }
            
            "new_message" -> {
                val chatId = data["chatId"] ?: return
                val senderName = data["senderName"] ?: "Unknown"
                val messageText = data["messageText"] ?: ""
                
                Log.d(TAG, "üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç $senderName")
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            }
            
            "call_ended" -> {
                val callId = data["callId"] ?: return
                Log.d(TAG, "üìµ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: $callId")
                // –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            }
            
            else -> {
                Log.d(TAG, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: $type")
            }
        }
        
        Log.d(TAG, "========================================")
        Log.d(TAG, "‚úÖ onMessageReceived –∑–∞–≤–µ—Ä—à–µ–Ω")
        Log.d(TAG, "========================================")
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    private fun createNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val callChannel = NotificationChannel(
                CHANNEL_ID_CALLS,
                "–í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö"
                enableVibration(true)
                vibrationPattern = longArrayOf(0, 1000, 500, 1000)
                lockscreenVisibility = Notification.VISIBILITY_PUBLIC
            }
            
            val messageChannel = NotificationChannel(
                CHANNEL_ID_MESSAGES,
                "–°–æ–æ–±—â–µ–Ω–∏—è",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
            }
            
            val notificationManager = getSystemService(NotificationManager::class.java)
            notificationManager.createNotificationChannel(callChannel)
            notificationManager.createNotificationChannel(messageChannel)
            
            Log.d(TAG, "üì± –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã")
        }
    }

    override fun onNewToken(token: String) {
        Log.d(TAG, "========================================")
        Log.d(TAG, "üîÑ –ù–æ–≤—ã–π FCM —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!")
        Log.d(TAG, "Token: ${token.take(50)}...")
        Log.d(TAG, "========================================")
        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    }
}